{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-kubernetes","text":""},{"location":"#welcome","title":"Welcome!","text":"<p><code>prefect-kubernetes</code> is a collection of Prefect tasks, flows, and blocks enabling orchestration, observation and management of Kubernetes resources.</p> <p>Jump to examples.</p>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-kubernetes</code> with <code>pip</code>: <pre><code> pip install prefect-kubernetes\n ```\n\nRequires an installation of Python 3.7+.\n\nWe recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.\n\nThese tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).\n\nThen, to register [blocks](https://orion-docs.prefect.io/ui/blocks/) on Prefect Cloud:\n\n```bash\nprefect block register -m prefect_kubernetes\n</code></pre></p> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#example-usage","title":"Example Usage","text":""},{"location":"#use-with_options-to-customize-options-on-any-existing-task-or-flow","title":"Use <code>with_options</code> to customize options on any existing task or flow","text":"<pre><code>from prefect_kubernetes.flows import run_namespaced_job\n\ncustomized_run_namespaced_job = run_namespaced_job.with_options(\n    name=\"My flow running a Kubernetes Job\",\n    retries=2,\n    retry_delay_seconds=10,\n) # this is now a new flow object that can be called\n</code></pre> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#specify-and-run-a-kubernetes-job-from-a-yaml-file","title":"Specify and run a Kubernetes Job from a yaml file","text":"<pre><code>from prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.flows import run_namespaced_job # this is a flow\nfrom prefect_kubernetes.jobs import KubernetesJob\n\nk8s_creds = KubernetesCredentials.load(\"k8s-creds\")\n\njob = KubernetesJob.from_yaml_file( # or create in the UI with a dict manifest\n    credentials=k8s_creds,\n    manifest_path=\"path/to/job.yaml\",\n)\n\njob.save(\"my-k8s-job\", overwrite=True)\n\nif __name__ == \"__main__\":\n    # run the flow\n    run_namespaced_job(job)\n</code></pre>"},{"location":"#generate-a-resource-specific-client-from-kubernetesclusterconfig","title":"Generate a resource-specific client from <code>KubernetesClusterConfig</code>","text":"<pre><code># with minikube / docker desktop &amp; a valid ~/.kube/config this should ~just work~\u2122\ufe0f\nfrom prefect.blocks.kubernetes import KubernetesClusterConfig\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\nk8s_config = KubernetesClusterConfig.from_file('~/.kube/config')\n\nk8s_credentials = KubernetesCredentials(cluster_config=k8s_config)\n\nwith k8s_credentials.get_client(\"core\") as v1_core_client:\n    for namespace in v1_core_client.list_namespace().items:\n        print(namespace.metadata.name)\n</code></pre>"},{"location":"#list-jobs-in-a-specific-namespace","title":"List jobs in a specific namespace","text":"<pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import list_namespaced_job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_list = list_namespaced_job(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        namespace=\"my-namespace\",\n    )\n</code></pre>"},{"location":"#patch-an-existing-deployment","title":"Patch an existing deployment","text":"<pre><code>from kubernetes.client.models import V1Deployment\n\nfrom prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import patch_namespaced_deployment\nfrom prefect_kubernetes.utilities import convert_manifest_to_model\n\n@flow\ndef kubernetes_orchestrator():\n\n    v1_deployment_updates = convert_manifest_to_model(\n        manifest=\"path/to/manifest.yaml\",\n        v1_model_name=\"V1Deployment\",\n    )\n\n    v1_deployment = patch_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        deployment_name=\"my-deployment\",\n        deployment_updates=v1_deployment_updates,\n        namespace=\"my-namespace\"\n    )\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-kubernetes</code>, feel free to open an issue in the prefect-kubernetes repository.</p> <p>If you have any questions or issues while using <code>prefect-kubernetes</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-kubernetes</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-kubernetes</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code> pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <code>pre-commit install</code></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-kubernetes</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_kubernetes\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>KubernetesCredentials</p> <p>Credentials block for generating configured Kubernetes API clients.</p> <p>To load the KubernetesCredentials: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\n@flow\ndef my_flow():\n    my_block = KubernetesCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"blocks_catalog/#jobs-module","title":"Jobs Module","text":"<p>KubernetesJob</p> <p>A block representing a Kubernetes job configuration.</p> <p>To load the KubernetesJob: <pre><code>from prefect import flow\nfrom prefect_kubernetes.jobs import KubernetesJob\n\n@flow\ndef my_flow():\n    my_block = KubernetesJob.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Jobs Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_kubernetes.credentials","title":"<code>prefect_kubernetes.credentials</code>","text":"<p>Module for defining Kubernetes credential handling and client generation.</p>"},{"location":"credentials/#prefect_kubernetes.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials","title":"<code>KubernetesCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Credentials block for generating configured Kubernetes API clients.</p> <p>Attributes:</p> Name Type Description <code>cluster_config</code> <code>Optional[KubernetesClusterConfig]</code> <p>A <code>KubernetesClusterConfig</code> block holding a JSON kube config for a specific kubernetes context.</p> Example <p>Load stored Kubernetes credentials: <pre><code>from prefect_kubernetes.credentials import KubernetesCredentials\n\nkubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_kubernetes/credentials.py</code> <pre><code>class KubernetesCredentials(Block):\n\"\"\"Credentials block for generating configured Kubernetes API clients.\n\n    Attributes:\n        cluster_config: A `KubernetesClusterConfig` block holding a JSON kube\n            config for a specific kubernetes context.\n\n    Example:\n        Load stored Kubernetes credentials:\n        ```python\n        from prefect_kubernetes.credentials import KubernetesCredentials\n\n        kubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Kubernetes Credentials\"\n    _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/oYuHjIbc26oilfQSEMjRv/a61f5f6ef406eead2df5231835b4c4c2/logo.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-kubernetes/credentials/#prefect_kubernetes.credentials.KubernetesCredentials\"  # noqa\n\n    cluster_config: Optional[KubernetesClusterConfig] = None\n\n    @contextmanager\n    def get_client(\n        self,\n        client_type: Literal[\"apps\", \"batch\", \"core\"],\n        configuration: Optional[Configuration] = None,\n    ) -&gt; Generator[KubernetesClient, None, None]:\n\"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources.\n\n        Args:\n            client_type: The resource-specific type of Kubernetes client to retrieve.\n\n        Yields:\n            An authenticated, resource-specific Kubernetes API client.\n\n        Example:\n            ```python\n            from prefect_kubernetes.credentials import KubernetesCredentials\n\n            with KubernetesCredentials.get_client(\"core\") as core_v1_client:\n                for pod in core_v1_client.list_namespaced_pod():\n                    print(pod.metadata.name)\n            ```\n        \"\"\"\n        client_config = configuration or Configuration()\n\n        with ApiClient(configuration=client_config) as generic_client:\n            try:\n                yield self.get_resource_specific_client(client_type)\n            finally:\n                generic_client.rest_client.pool_manager.clear()\n\n    def get_resource_specific_client(\n        self,\n        client_type: str,\n    ) -&gt; Union[AppsV1Api, BatchV1Api, CoreV1Api]:\n\"\"\"\n        Utility function for configuring a generic Kubernetes client.\n        It will attempt to connect to a Kubernetes cluster in three steps with\n        the first successful connection attempt becoming the mode of communication with\n        a cluster:\n\n        1. It will first attempt to use a `KubernetesCredentials` block's\n        `cluster_config` to configure a client using\n        `KubernetesClusterConfig.configure_client`.\n\n        2. Attempt in-cluster connection (will only work when running on a pod).\n\n        3. Attempt out-of-cluster connection using the default location for a\n        kube config file.\n\n        Args:\n            client_type: The Kubernetes API client type for interacting with specific\n                Kubernetes resources.\n\n        Returns:\n            KubernetesClient: An authenticated, resource-specific Kubernetes Client.\n\n        Raises:\n            ValueError: If `client_type` is not a valid Kubernetes API client type.\n        \"\"\"\n\n        if self.cluster_config:\n            self.cluster_config.configure_client()\n        else:\n            try:\n                kube_config.load_incluster_config()\n            except ConfigException:\n                kube_config.load_kube_config()\n\n        try:\n            return K8S_CLIENT_TYPES[client_type]()\n        except KeyError:\n            raise ValueError(\n                f\"Invalid client type provided '{client_type}'.\"\n                f\" Must be one of {listrepr(K8S_CLIENT_TYPES.keys())}.\"\n            )\n</code></pre>"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials.get_client","title":"<code>get_client</code>","text":"<p>Convenience method for retrieving a Kubernetes API client for deployment resources.</p> <p>Parameters:</p> Name Type Description Default <code>client_type</code> <code>Literal[apps, batch, core]</code> <p>The resource-specific type of Kubernetes client to retrieve.</p> required <p>Yields:</p> Type Description <code>Generator[KubernetesClient, None, None]</code> <p>An authenticated, resource-specific Kubernetes API client.</p> Example <pre><code>from prefect_kubernetes.credentials import KubernetesCredentials\n\nwith KubernetesCredentials.get_client(\"core\") as core_v1_client:\n    for pod in core_v1_client.list_namespaced_pod():\n        print(pod.metadata.name)\n</code></pre> Source code in <code>prefect_kubernetes/credentials.py</code> <pre><code>@contextmanager\ndef get_client(\n    self,\n    client_type: Literal[\"apps\", \"batch\", \"core\"],\n    configuration: Optional[Configuration] = None,\n) -&gt; Generator[KubernetesClient, None, None]:\n\"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources.\n\n    Args:\n        client_type: The resource-specific type of Kubernetes client to retrieve.\n\n    Yields:\n        An authenticated, resource-specific Kubernetes API client.\n\n    Example:\n        ```python\n        from prefect_kubernetes.credentials import KubernetesCredentials\n\n        with KubernetesCredentials.get_client(\"core\") as core_v1_client:\n            for pod in core_v1_client.list_namespaced_pod():\n                print(pod.metadata.name)\n        ```\n    \"\"\"\n    client_config = configuration or Configuration()\n\n    with ApiClient(configuration=client_config) as generic_client:\n        try:\n            yield self.get_resource_specific_client(client_type)\n        finally:\n            generic_client.rest_client.pool_manager.clear()\n</code></pre>"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials.get_resource_specific_client","title":"<code>get_resource_specific_client</code>","text":"<p>Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster:</p> <ol> <li> <p>It will first attempt to use a <code>KubernetesCredentials</code> block's <code>cluster_config</code> to configure a client using <code>KubernetesClusterConfig.configure_client</code>.</p> </li> <li> <p>Attempt in-cluster connection (will only work when running on a pod).</p> </li> <li> <p>Attempt out-of-cluster connection using the default location for a kube config file.</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>client_type</code> <code>str</code> <p>The Kubernetes API client type for interacting with specific Kubernetes resources.</p> required <p>Returns:</p> Name Type Description <code>KubernetesClient</code> <code>Union[AppsV1Api, BatchV1Api, CoreV1Api]</code> <p>An authenticated, resource-specific Kubernetes Client.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>client_type</code> is not a valid Kubernetes API client type.</p> Source code in <code>prefect_kubernetes/credentials.py</code> <pre><code>def get_resource_specific_client(\n    self,\n    client_type: str,\n) -&gt; Union[AppsV1Api, BatchV1Api, CoreV1Api]:\n\"\"\"\n    Utility function for configuring a generic Kubernetes client.\n    It will attempt to connect to a Kubernetes cluster in three steps with\n    the first successful connection attempt becoming the mode of communication with\n    a cluster:\n\n    1. It will first attempt to use a `KubernetesCredentials` block's\n    `cluster_config` to configure a client using\n    `KubernetesClusterConfig.configure_client`.\n\n    2. Attempt in-cluster connection (will only work when running on a pod).\n\n    3. Attempt out-of-cluster connection using the default location for a\n    kube config file.\n\n    Args:\n        client_type: The Kubernetes API client type for interacting with specific\n            Kubernetes resources.\n\n    Returns:\n        KubernetesClient: An authenticated, resource-specific Kubernetes Client.\n\n    Raises:\n        ValueError: If `client_type` is not a valid Kubernetes API client type.\n    \"\"\"\n\n    if self.cluster_config:\n        self.cluster_config.configure_client()\n    else:\n        try:\n            kube_config.load_incluster_config()\n        except ConfigException:\n            kube_config.load_kube_config()\n\n    try:\n        return K8S_CLIENT_TYPES[client_type]()\n    except KeyError:\n        raise ValueError(\n            f\"Invalid client type provided '{client_type}'.\"\n            f\" Must be one of {listrepr(K8S_CLIENT_TYPES.keys())}.\"\n        )\n</code></pre>"},{"location":"deployments/","title":"Deployments","text":""},{"location":"deployments/#prefect_kubernetes.deployments","title":"<code>prefect_kubernetes.deployments</code>","text":"<p>Module for interacting with Kubernetes deployments from Prefect flows.</p>"},{"location":"deployments/#prefect_kubernetes.deployments-classes","title":"Classes","text":""},{"location":"deployments/#prefect_kubernetes.deployments-functions","title":"Functions","text":""},{"location":"deployments/#prefect_kubernetes.deployments.create_namespaced_deployment","title":"<code>create_namespaced_deployment</code>  <code>async</code>","text":"<p>Create a Kubernetes deployment in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>new_deployment</code> <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> specification.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to create this deployment in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> Example <p>Create a deployment in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import create_namespaced_deployment\nfrom kubernetes.client.models import V1Deployment\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_metadata = create_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        new_deployment=V1Deployment(metadata={\"name\": \"test-deployment\"}),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def create_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    new_deployment: V1Deployment,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Deployment:\n\"\"\"Create a Kubernetes deployment in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        new_deployment: A Kubernetes `V1Deployment` specification.\n        namespace: The Kubernetes namespace to create this deployment in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Deployment` object.\n\n    Example:\n        Create a deployment in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.deployments import create_namespaced_deployment\n        from kubernetes.client.models import V1Deployment\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_metadata = create_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                new_deployment=V1Deployment(metadata={\"name\": \"test-deployment\"}),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.create_namespaced_deployment,\n            namespace=namespace,\n            body=new_deployment,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"deployments/#prefect_kubernetes.deployments.delete_namespaced_deployment","title":"<code>delete_namespaced_deployment</code>  <code>async</code>","text":"<p>Delete a Kubernetes deployment in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>deployment_name</code> <code>str</code> <p>The name of the deployment to delete.</p> required <code>delete_options</code> <code>Optional[V1DeleteOptions]</code> <p>A Kubernetes <code>V1DeleteOptions</code> object.</p> <code>None</code> <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to delete this deployment from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> Example <p>Delete a deployment in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import delete_namespaced_deployment\nfrom kubernetes.client.models import V1DeleteOptions\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_metadata = delete_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        deployment_name=\"test-deployment\",\n        delete_options=V1DeleteOptions(grace_period_seconds=0),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def delete_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    deployment_name: str,\n    delete_options: Optional[V1DeleteOptions] = None,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Deployment:\n\"\"\"Delete a Kubernetes deployment in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        deployment_name: The name of the deployment to delete.\n        delete_options: A Kubernetes `V1DeleteOptions` object.\n        namespace: The Kubernetes namespace to delete this deployment from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Deployment` object.\n\n    Example:\n        Delete a deployment in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.deployments import delete_namespaced_deployment\n        from kubernetes.client.models import V1DeleteOptions\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_metadata = delete_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                deployment_name=\"test-deployment\",\n                delete_options=V1DeleteOptions(grace_period_seconds=0),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.delete_namespaced_deployment,\n            deployment_name,\n            body=delete_options,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"deployments/#prefect_kubernetes.deployments.list_namespaced_deployment","title":"<code>list_namespaced_deployment</code>  <code>async</code>","text":"<p>List all deployments in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to list deployments from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1DeploymentList</code> <p>A Kubernetes <code>V1DeploymentList</code> object.</p> Example <p>List all deployments in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import list_namespaced_deployment\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_list = list_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\")\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def list_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1DeploymentList:\n\"\"\"List all deployments in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        namespace: The Kubernetes namespace to list deployments from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1DeploymentList` object.\n\n    Example:\n        List all deployments in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.deployments import list_namespaced_deployment\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_list = list_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\")\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.list_namespaced_deployment,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"deployments/#prefect_kubernetes.deployments.patch_namespaced_deployment","title":"<code>patch_namespaced_deployment</code>  <code>async</code>","text":"<p>Patch a Kubernetes deployment in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>deployment_name</code> <code>str</code> <p>The name of the deployment to patch.</p> required <code>deployment_updates</code> <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to patch this deployment in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> Example <p>Patch a deployment in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import patch_namespaced_deployment\nfrom kubernetes.client.models import V1Deployment\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_metadata = patch_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        deployment_name=\"test-deployment\",\n        deployment_updates=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def patch_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    deployment_name: str,\n    deployment_updates: V1Deployment,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Deployment:\n\"\"\"Patch a Kubernetes deployment in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        deployment_name: The name of the deployment to patch.\n        deployment_updates: A Kubernetes `V1Deployment` object.\n        namespace: The Kubernetes namespace to patch this deployment in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Deployment` object.\n\n    Example:\n        Patch a deployment in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.deployments import patch_namespaced_deployment\n        from kubernetes.client.models import V1Deployment\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_metadata = patch_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                deployment_name=\"test-deployment\",\n                deployment_updates=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.patch_namespaced_deployment,\n            name=deployment_name,\n            namespace=namespace,\n            body=deployment_updates,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"deployments/#prefect_kubernetes.deployments.read_namespaced_deployment","title":"<code>read_namespaced_deployment</code>  <code>async</code>","text":"<p>Read information on a Kubernetes deployment in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>deployment_name</code> <code>str</code> <p>The name of the deployment to read.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to read this deployment from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> Example <p>Read a deployment in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_metadata = read_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        deployment_name=\"test-deployment\"\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def read_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    deployment_name: str,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Deployment:\n\"\"\"Read information on a Kubernetes deployment in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        deployment_name: The name of the deployment to read.\n        namespace: The Kubernetes namespace to read this deployment from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Deployment` object.\n\n    Example:\n        Read a deployment in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_metadata = read_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                deployment_name=\"test-deployment\"\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.read_namespaced_deployment,\n            name=deployment_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"deployments/#prefect_kubernetes.deployments.replace_namespaced_deployment","title":"<code>replace_namespaced_deployment</code>  <code>async</code>","text":"<p>Replace a Kubernetes deployment in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>deployment_name</code> <code>str</code> <p>The name of the deployment to replace.</p> required <code>new_deployment</code> <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to replace this deployment in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Deployment</code> <p>A Kubernetes <code>V1Deployment</code> object.</p> Example <p>Replace a deployment in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.deployments import replace_namespaced_deployment\nfrom kubernetes.client.models import V1Deployment\n\n@flow\ndef kubernetes_orchestrator():\n    v1_deployment_metadata = replace_namespaced_deployment(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        deployment_name=\"test-deployment\",\n        new_deployment=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}})\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/deployments.py</code> <pre><code>@task\nasync def replace_namespaced_deployment(\n    kubernetes_credentials: KubernetesCredentials,\n    deployment_name: str,\n    new_deployment: V1Deployment,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Deployment:\n\"\"\"Replace a Kubernetes deployment in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        deployment_name: The name of the deployment to replace.\n        new_deployment: A Kubernetes `V1Deployment` object.\n        namespace: The Kubernetes namespace to replace this deployment in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Deployment` object.\n\n    Example:\n        Replace a deployment in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.deployments import replace_namespaced_deployment\n        from kubernetes.client.models import V1Deployment\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_deployment_metadata = replace_namespaced_deployment(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                deployment_name=\"test-deployment\",\n                new_deployment=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}})\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.replace_namespaced_deployment,\n            body=new_deployment,\n            name=deployment_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-kubernetes</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<pre><code>from prefect_kubernetes.credentials import KubernetesCredentials\n\nwith KubernetesCredentials.get_client(\"core\") as core_v1_client:\n    for pod in core_v1_client.list_namespaced_pod():\n        print(pod.metadata.name)\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#prefect_kubernetes.exceptions","title":"<code>prefect_kubernetes.exceptions</code>","text":"<p>Module to define common exceptions within <code>prefect_kubernetes</code>.</p>"},{"location":"exceptions/#prefect_kubernetes.exceptions-classes","title":"Classes","text":""},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobDefinitionError","title":"<code>KubernetesJobDefinitionError</code>","text":"<p>         Bases: <code>OpenApiException</code></p> <p>An exception for when a Kubernetes job definition is invalid.</p> Source code in <code>prefect_kubernetes/exceptions.py</code> <pre><code>class KubernetesJobDefinitionError(OpenApiException):\n\"\"\"An exception for when a Kubernetes job definition is invalid.\"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobFailedError","title":"<code>KubernetesJobFailedError</code>","text":"<p>         Bases: <code>OpenApiException</code></p> <p>An exception for when a Kubernetes job fails.</p> Source code in <code>prefect_kubernetes/exceptions.py</code> <pre><code>class KubernetesJobFailedError(OpenApiException):\n\"\"\"An exception for when a Kubernetes job fails.\"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobTimeoutError","title":"<code>KubernetesJobTimeoutError</code>","text":"<p>         Bases: <code>OpenApiException</code></p> <p>An exception for when a Kubernetes job times out.</p> Source code in <code>prefect_kubernetes/exceptions.py</code> <pre><code>class KubernetesJobTimeoutError(OpenApiException):\n\"\"\"An exception for when a Kubernetes job times out.\"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesResourceNotFoundError","title":"<code>KubernetesResourceNotFoundError</code>","text":"<p>         Bases: <code>ApiException</code></p> <p>An exception for when a Kubernetes resource cannot be found by a client.</p> Source code in <code>prefect_kubernetes/exceptions.py</code> <pre><code>class KubernetesResourceNotFoundError(ApiException):\n\"\"\"An exception for when a Kubernetes resource cannot be found by a client.\"\"\"\n</code></pre>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_kubernetes.flows","title":"<code>prefect_kubernetes.flows</code>","text":"<p>A module to define flows interacting with Kubernetes resources.</p>"},{"location":"flows/#prefect_kubernetes.flows-classes","title":"Classes","text":""},{"location":"flows/#prefect_kubernetes.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_kubernetes.flows.run_namespaced_job","title":"<code>run_namespaced_job</code>  <code>async</code>","text":"<p>Flow for running a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_job</code> <code>KubernetesJob</code> <p>The <code>KubernetesJob</code> block that specifies the job to run.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the created Kubernetes job attains a failed status.</p> Example <pre><code>from prefect_kubernetes import KubernetesJob, run_namespaced_job\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\nrun_namespaced_job(\n    kubernetes_job=KubernetesJob.from_yaml_file(\n        credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        manifest_path=\"path/to/job.yaml\",\n    )\n)\n</code></pre> Source code in <code>prefect_kubernetes/flows.py</code> <pre><code>@flow\nasync def run_namespaced_job(\n    kubernetes_job: KubernetesJob,\n) -&gt; Dict[str, Any]:\n\"\"\"Flow for running a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_job: The `KubernetesJob` block that specifies the job to run.\n\n    Returns:\n        The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}.\n\n    Raises:\n        RuntimeError: If the created Kubernetes job attains a failed status.\n\n    Example:\n\n        ```python\n        from prefect_kubernetes import KubernetesJob, run_namespaced_job\n        from prefect_kubernetes.credentials import KubernetesCredentials\n\n        run_namespaced_job(\n            kubernetes_job=KubernetesJob.from_yaml_file(\n                credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                manifest_path=\"path/to/job.yaml\",\n            )\n        )\n        ```\n    \"\"\"\n    kubernetes_job_run = await task(kubernetes_job.trigger.aio)(kubernetes_job)\n\n    await task(kubernetes_job_run.wait_for_completion.aio)(kubernetes_job_run)\n\n    return await task(kubernetes_job_run.fetch_result.aio)(kubernetes_job_run)\n</code></pre>"},{"location":"jobs/","title":"Jobs","text":""},{"location":"jobs/#prefect_kubernetes.jobs","title":"<code>prefect_kubernetes.jobs</code>","text":"<p>Module to define tasks for interacting with Kubernetes jobs.</p>"},{"location":"jobs/#prefect_kubernetes.jobs-classes","title":"Classes","text":""},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob","title":"<code>KubernetesJob</code>","text":"<p>         Bases: <code>JobBlock</code></p> <p>A block representing a Kubernetes job configuration.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>class KubernetesJob(JobBlock):\n\"\"\"A block representing a Kubernetes job configuration.\"\"\"\n\n    v1_job: Dict[str, Any] = Field(\n        default=...,\n        title=\"Job Manifest\",\n        description=(\n            \"The Kubernetes job manifest to run. This dictionary can be produced \"\n            \"using `yaml.safe_load`.\"\n        ),\n    )\n    api_kwargs: Dict[str, Any] = Field(\n        default_factory=dict,\n        title=\"Additional API Arguments\",\n        description=\"Additional arguments to include in Kubernetes API calls.\",\n        example={\"pretty\": \"true\"},\n    )\n    credentials: KubernetesCredentials = Field(\n        default=..., description=\"The credentials to configure a client from.\"\n    )\n    delete_after_completion: bool = Field(\n        default=True,\n        description=\"Whether to delete the job after it has completed.\",\n    )\n    interval_seconds: int = Field(\n        default=5,\n        description=\"The number of seconds to wait between job status checks.\",\n    )\n    namespace: str = Field(\n        default=\"default\",\n        description=\"The namespace to create and run the job in.\",\n    )\n    timeout_seconds: Optional[int] = Field(\n        default=None,\n        description=\"The number of seconds to wait for the job run before timing out.\",\n    )\n\n    _block_type_name = \"Kubernetes Job\"\n    _block_type_slug = \"k8s-job\"\n    _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/35vNcprr3MmIlkrKxxCiah/1d720b4b50dfa8876198cf21730cf123/Kubernetes_logo_without_workmark.svg.png?h=250\"  # noqa: E501\n    _documentation_url = \"https://prefecthq.github.io/prefect-kubernetes/jobs/#prefect_kubernetes.jobs.KubernetesJob\"  # noqa\n\n    @sync_compatible\n    async def trigger(self):\n\"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\"\n\n        v1_job_model = convert_manifest_to_model(self.v1_job, \"V1Job\")\n\n        with self.credentials.get_client(\"batch\") as batch_v1_client:\n            await run_sync_in_worker_thread(\n                batch_v1_client.create_namespaced_job,\n                body=v1_job_model,\n                namespace=self.namespace,\n                **self.api_kwargs,\n            )\n\n        return KubernetesJobRun(kubernetes_job=self, v1_job_model=v1_job_model)\n\n    @classmethod\n    def from_yaml_file(\n        cls: Type[Self], manifest_path: Union[Path, str], **kwargs\n    ) -&gt; Self:\n\"\"\"Create a `KubernetesJob` from a YAML file.\n\n        Args:\n            manifest_path: The YAML file to create the `KubernetesJob` from.\n\n        Returns:\n            A KubernetesJob object.\n        \"\"\"\n        with open(manifest_path, \"r\") as yaml_stream:\n            yaml_dict = yaml.safe_load(yaml_stream)\n\n        return cls(v1_job=yaml_dict, **kwargs)\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob-functions","title":"Functions","text":""},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob.from_yaml_file","title":"<code>from_yaml_file</code>  <code>classmethod</code>","text":"<p>Create a <code>KubernetesJob</code> from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_path</code> <code>Union[Path, str]</code> <p>The YAML file to create the <code>KubernetesJob</code> from.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A KubernetesJob object.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@classmethod\ndef from_yaml_file(\n    cls: Type[Self], manifest_path: Union[Path, str], **kwargs\n) -&gt; Self:\n\"\"\"Create a `KubernetesJob` from a YAML file.\n\n    Args:\n        manifest_path: The YAML file to create the `KubernetesJob` from.\n\n    Returns:\n        A KubernetesJob object.\n    \"\"\"\n    with open(manifest_path, \"r\") as yaml_stream:\n        yaml_dict = yaml.safe_load(yaml_stream)\n\n    return cls(v1_job=yaml_dict, **kwargs)\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob.trigger","title":"<code>trigger</code>  <code>async</code>","text":"<p>Create a Kubernetes job and return a <code>KubernetesJobRun</code> object.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@sync_compatible\nasync def trigger(self):\n\"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\"\n\n    v1_job_model = convert_manifest_to_model(self.v1_job, \"V1Job\")\n\n    with self.credentials.get_client(\"batch\") as batch_v1_client:\n        await run_sync_in_worker_thread(\n            batch_v1_client.create_namespaced_job,\n            body=v1_job_model,\n            namespace=self.namespace,\n            **self.api_kwargs,\n        )\n\n    return KubernetesJobRun(kubernetes_job=self, v1_job_model=v1_job_model)\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun","title":"<code>KubernetesJobRun</code>","text":"<p>         Bases: <code>JobRun[Dict[str, Any]]</code></p> <p>A container representing a run of a Kubernetes job.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>class KubernetesJobRun(JobRun[Dict[str, Any]]):\n\"\"\"A container representing a run of a Kubernetes job.\"\"\"\n\n    def __init__(\n        self,\n        kubernetes_job: \"KubernetesJob\",\n        v1_job_model: V1Job,\n    ):\n        self.pod_logs = None\n\n        self._completed = False\n        self._kubernetes_job = kubernetes_job\n        self._v1_job_model = v1_job_model\n\n    async def _cleanup(self):\n\"\"\"Deletes the Kubernetes job resource.\"\"\"\n        with self._kubernetes_job.credentials.get_client(\"batch\") as batch_v1_client:\n            deleted_v1_job = await run_sync_in_worker_thread(\n                batch_v1_client.delete_namespaced_job,\n                namespace=self._kubernetes_job.namespace,\n                name=self._v1_job_model.metadata.name,\n                **self._kubernetes_job.api_kwargs,\n            )\n            self.logger.info(\n                f\"Job {self._v1_job_model.metadata.name} deleted \"\n                f\"with {deleted_v1_job.status!r}.\"\n            )\n\n    @sync_compatible\n    async def wait_for_completion(self):\n\"\"\"Waits for the job to complete.\n\n        If the job has `delete_after_completion` set to `True`,\n        the job will be deleted if it is observed by this method\n        to enter a completed state.\n\n        Raises:\n            RuntimeError: If the Kubernetes job fails.\n            KubernetesJobTimeoutError: If the Kubernetes job times out.\n            ValueError: If `wait_for_completion` is never called.\n        \"\"\"\n        self.pod_logs = {}\n\n        with self._kubernetes_job.credentials.get_client(\n            \"batch\"\n        ) as batch_v1_client, self._kubernetes_job.credentials.get_client(\n            \"core\"\n        ) as core_v1_client:\n\n            elapsed_time = 0\n\n            while not self._completed:\n                job_expired = (\n                    elapsed_time &gt; self._kubernetes_job.timeout_seconds\n                    if self._kubernetes_job.timeout_seconds\n                    else False\n                )\n                if job_expired:\n                    raise KubernetesJobTimeoutError(\n                        f\"Job timed out after {elapsed_time} seconds.\"\n                    )\n\n                latest_v1_job = await run_sync_in_worker_thread(\n                    batch_v1_client.read_namespaced_job_status,\n                    name=self._v1_job_model.metadata.name,\n                    namespace=self._kubernetes_job.namespace,\n                    **self._kubernetes_job.api_kwargs,\n                )\n                pod_selector = (\n                    \"controller-uid=\"\n                    f\"{latest_v1_job.metadata.labels['controller-uid']}\"\n                )\n                v1_pod_list = await run_sync_in_worker_thread(\n                    core_v1_client.list_namespaced_pod,\n                    namespace=self._kubernetes_job.namespace,\n                    label_selector=pod_selector,\n                    **self._kubernetes_job.api_kwargs,\n                )\n                for pod in v1_pod_list.items:\n                    pod_name = pod.metadata.name\n\n                    if (\n                        pod.status.phase == \"Pending\"\n                        or pod_name in self.pod_logs.keys()\n                    ):\n                        continue\n\n                    self.logger.info(f\"Capturing logs for pod {pod_name!r}.\")\n\n                    self.pod_logs[pod_name] = await run_sync_in_worker_thread(\n                        core_v1_client.read_namespaced_pod_log,\n                        namespace=self._kubernetes_job.namespace,\n                        name=pod_name,\n                        container=latest_v1_job.spec.template.spec.containers[0].name,\n                        **self._kubernetes_job.api_kwargs,\n                    )\n\n                if latest_v1_job.status.active:\n                    await sleep(self._kubernetes_job.interval_seconds)\n                    if self._kubernetes_job.timeout_seconds:\n                        elapsed_time += self._kubernetes_job.interval_seconds\n                elif latest_v1_job.status.failed:\n                    raise RuntimeError(\n                        f\"Job {latest_v1_job.metadata.name!r} failed, check the \"\n                        \"Kubernetes pod logs for more information.\"\n                    )\n                elif latest_v1_job.status.succeeded:\n                    self._completed = True\n                    self.logger.info(\n                        f\"Job {latest_v1_job.metadata.name!r} has completed.\"\n                    )\n\n        if self._kubernetes_job.delete_after_completion:\n            await self._cleanup()\n\n    @sync_compatible\n    async def fetch_result(self) -&gt; Dict[str, Any]:\n\"\"\"Fetch the results of the job.\n\n        Returns:\n            The logs from each of the pods in the job.\n\n        Raises:\n            ValueError: If this method is called when the job has\n                a non-terminal state.\n        \"\"\"\n\n        if not self._completed:\n            raise ValueError(\n                \"The Kubernetes Job run is not in a completed state - \"\n                \"be sure to call `wait_for_completion` before attempting \"\n                \"to fetch the result.\"\n            )\n        return self.pod_logs\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun-functions","title":"Functions","text":""},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun.fetch_result","title":"<code>fetch_result</code>  <code>async</code>","text":"<p>Fetch the results of the job.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The logs from each of the pods in the job.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If this method is called when the job has a non-terminal state.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@sync_compatible\nasync def fetch_result(self) -&gt; Dict[str, Any]:\n\"\"\"Fetch the results of the job.\n\n    Returns:\n        The logs from each of the pods in the job.\n\n    Raises:\n        ValueError: If this method is called when the job has\n            a non-terminal state.\n    \"\"\"\n\n    if not self._completed:\n        raise ValueError(\n            \"The Kubernetes Job run is not in a completed state - \"\n            \"be sure to call `wait_for_completion` before attempting \"\n            \"to fetch the result.\"\n        )\n    return self.pod_logs\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun.wait_for_completion","title":"<code>wait_for_completion</code>  <code>async</code>","text":"<p>Waits for the job to complete.</p> <p>If the job has <code>delete_after_completion</code> set to <code>True</code>, the job will be deleted if it is observed by this method to enter a completed state.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the Kubernetes job fails.</p> <code>KubernetesJobTimeoutError</code> <p>If the Kubernetes job times out.</p> <code>ValueError</code> <p>If <code>wait_for_completion</code> is never called.</p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@sync_compatible\nasync def wait_for_completion(self):\n\"\"\"Waits for the job to complete.\n\n    If the job has `delete_after_completion` set to `True`,\n    the job will be deleted if it is observed by this method\n    to enter a completed state.\n\n    Raises:\n        RuntimeError: If the Kubernetes job fails.\n        KubernetesJobTimeoutError: If the Kubernetes job times out.\n        ValueError: If `wait_for_completion` is never called.\n    \"\"\"\n    self.pod_logs = {}\n\n    with self._kubernetes_job.credentials.get_client(\n        \"batch\"\n    ) as batch_v1_client, self._kubernetes_job.credentials.get_client(\n        \"core\"\n    ) as core_v1_client:\n\n        elapsed_time = 0\n\n        while not self._completed:\n            job_expired = (\n                elapsed_time &gt; self._kubernetes_job.timeout_seconds\n                if self._kubernetes_job.timeout_seconds\n                else False\n            )\n            if job_expired:\n                raise KubernetesJobTimeoutError(\n                    f\"Job timed out after {elapsed_time} seconds.\"\n                )\n\n            latest_v1_job = await run_sync_in_worker_thread(\n                batch_v1_client.read_namespaced_job_status,\n                name=self._v1_job_model.metadata.name,\n                namespace=self._kubernetes_job.namespace,\n                **self._kubernetes_job.api_kwargs,\n            )\n            pod_selector = (\n                \"controller-uid=\"\n                f\"{latest_v1_job.metadata.labels['controller-uid']}\"\n            )\n            v1_pod_list = await run_sync_in_worker_thread(\n                core_v1_client.list_namespaced_pod,\n                namespace=self._kubernetes_job.namespace,\n                label_selector=pod_selector,\n                **self._kubernetes_job.api_kwargs,\n            )\n            for pod in v1_pod_list.items:\n                pod_name = pod.metadata.name\n\n                if (\n                    pod.status.phase == \"Pending\"\n                    or pod_name in self.pod_logs.keys()\n                ):\n                    continue\n\n                self.logger.info(f\"Capturing logs for pod {pod_name!r}.\")\n\n                self.pod_logs[pod_name] = await run_sync_in_worker_thread(\n                    core_v1_client.read_namespaced_pod_log,\n                    namespace=self._kubernetes_job.namespace,\n                    name=pod_name,\n                    container=latest_v1_job.spec.template.spec.containers[0].name,\n                    **self._kubernetes_job.api_kwargs,\n                )\n\n            if latest_v1_job.status.active:\n                await sleep(self._kubernetes_job.interval_seconds)\n                if self._kubernetes_job.timeout_seconds:\n                    elapsed_time += self._kubernetes_job.interval_seconds\n            elif latest_v1_job.status.failed:\n                raise RuntimeError(\n                    f\"Job {latest_v1_job.metadata.name!r} failed, check the \"\n                    \"Kubernetes pod logs for more information.\"\n                )\n            elif latest_v1_job.status.succeeded:\n                self._completed = True\n                self.logger.info(\n                    f\"Job {latest_v1_job.metadata.name!r} has completed.\"\n                )\n\n    if self._kubernetes_job.delete_after_completion:\n        await self._cleanup()\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs-functions","title":"Functions","text":""},{"location":"jobs/#prefect_kubernetes.jobs.create_namespaced_job","title":"<code>create_namespaced_job</code>  <code>async</code>","text":"<p>Task for creating a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block holding authentication needed to generate the required API client.</p> required <code>new_job</code> <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> specification.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to create this job in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> object.</p> Example <p>Create a job in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import create_namespaced_job\nfrom kubernetes.client.models import V1Job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_metadata = create_namespaced_job(\n        new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}),\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def create_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    new_job: V1Job,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Job:\n\"\"\"Task for creating a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block\n            holding authentication needed to generate the required API client.\n        new_job: A Kubernetes `V1Job` specification.\n        namespace: The Kubernetes namespace to create this job in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n    Returns:\n        A Kubernetes `V1Job` object.\n\n    Example:\n        Create a job in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import create_namespaced_job\n        from kubernetes.client.models import V1Job\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_job_metadata = create_namespaced_job(\n                new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}),\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.create_namespaced_job,\n            namespace=namespace,\n            body=new_job,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.delete_namespaced_job","title":"<code>delete_namespaced_job</code>  <code>async</code>","text":"<p>Task for deleting a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block holding authentication needed to generate the required API client.</p> required <code>job_name</code> <code>str</code> <p>The name of a job to delete.</p> required <code>delete_options</code> <code>Optional[V1DeleteOptions]</code> <p>A Kubernetes <code>V1DeleteOptions</code> object.</p> <code>None</code> <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to delete this job in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Status</code> <p>A Kubernetes <code>V1Status</code> object.</p> Example <p>Delete \"my-job\" in the default namespace: <pre><code>from kubernetes.client.models import V1DeleteOptions\nfrom prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import delete_namespaced_job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_status = delete_namespaced_job(\n        job_name=\"my-job\",\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        delete_options=V1DeleteOptions(propagation_policy=\"Foreground\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def delete_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    job_name: str,\n    delete_options: Optional[V1DeleteOptions] = None,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Status:\n\"\"\"Task for deleting a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block\n            holding authentication needed to generate the required API client.\n        job_name: The name of a job to delete.\n        delete_options: A Kubernetes `V1DeleteOptions` object.\n        namespace: The Kubernetes namespace to delete this job in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n\n    Returns:\n        A Kubernetes `V1Status` object.\n\n    Example:\n        Delete \"my-job\" in the default namespace:\n        ```python\n        from kubernetes.client.models import V1DeleteOptions\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import delete_namespaced_job\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_job_status = delete_namespaced_job(\n                job_name=\"my-job\",\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                delete_options=V1DeleteOptions(propagation_policy=\"Foreground\"),\n            )\n        ```\n    \"\"\"\n\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.delete_namespaced_job,\n            name=job_name,\n            body=delete_options,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.list_namespaced_job","title":"<code>list_namespaced_job</code>  <code>async</code>","text":"<p>Task for listing namespaced Kubernetes jobs.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block holding authentication needed to generate the required API client.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to list jobs from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1JobList</code> <p>A Kubernetes <code>V1JobList</code> object.</p> Example <p>List jobs in \"my-namespace\": <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import list_namespaced_job\n\n@flow\ndef kubernetes_orchestrator():\n    namespaced_job_list = list_namespaced_job(\n        namespace=\"my-namespace\",\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def list_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1JobList:\n\"\"\"Task for listing namespaced Kubernetes jobs.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block\n            holding authentication needed to generate the required API client.\n        namespace: The Kubernetes namespace to list jobs from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n    Returns:\n        A Kubernetes `V1JobList` object.\n\n    Example:\n        List jobs in \"my-namespace\":\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import list_namespaced_job\n\n        @flow\n        def kubernetes_orchestrator():\n            namespaced_job_list = list_namespaced_job(\n                namespace=\"my-namespace\",\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.list_namespaced_job,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.patch_namespaced_job","title":"<code>patch_namespaced_job</code>  <code>async</code>","text":"<p>Task for patching a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p>KubernetesCredentials block holding authentication needed to generate the required API client.</p> required <code>job_name</code> <code>str</code> <p>The name of a job to patch.</p> required <code>job_updates</code> <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> specification.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to patch this job in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>job_name</code> is <code>None</code>.</p> <p>Returns:</p> Type Description <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> object.</p> Example <p>Patch \"my-job\" in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import patch_namespaced_job\n\nfrom kubernetes.client.models import V1Job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_metadata = patch_namespaced_job(\n        job_name=\"my-job\",\n        job_updates=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}}),\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def patch_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    job_name: str,\n    job_updates: V1Job,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Job:\n\"\"\"Task for patching a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_credentials: KubernetesCredentials block\n            holding authentication needed to generate the required API client.\n        job_name: The name of a job to patch.\n        job_updates: A Kubernetes `V1Job` specification.\n        namespace: The Kubernetes namespace to patch this job in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n    Raises:\n        ValueError: if `job_name` is `None`.\n\n    Returns:\n        A Kubernetes `V1Job` object.\n\n    Example:\n        Patch \"my-job\" in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import patch_namespaced_job\n\n        from kubernetes.client.models import V1Job\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_job_metadata = patch_namespaced_job(\n                job_name=\"my-job\",\n                job_updates=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}}),\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n            )\n        ```\n    \"\"\"\n\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.patch_namespaced_job,\n            name=job_name,\n            namespace=namespace,\n            body=job_updates,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.read_namespaced_job","title":"<code>read_namespaced_job</code>  <code>async</code>","text":"<p>Task for reading a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block holding authentication needed to generate the required API client.</p> required <code>job_name</code> <code>str</code> <p>The name of a job to read.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to read this job in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>job_name</code> is <code>None</code>.</p> <p>Returns:</p> Type Description <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> object.</p> Example <p>Read \"my-job\" in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import read_namespaced_job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_metadata = read_namespaced_job(\n        job_name=\"my-job\",\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def read_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    job_name: str,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Job:\n\"\"\"Task for reading a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block\n            holding authentication needed to generate the required API client.\n        job_name: The name of a job to read.\n        namespace: The Kubernetes namespace to read this job in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n    Raises:\n        ValueError: if `job_name` is `None`.\n\n    Returns:\n        A Kubernetes `V1Job` object.\n\n    Example:\n        Read \"my-job\" in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import read_namespaced_job\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_job_metadata = read_namespaced_job(\n                job_name=\"my-job\",\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.read_namespaced_job,\n            name=job_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"jobs/#prefect_kubernetes.jobs.replace_namespaced_job","title":"<code>replace_namespaced_job</code>  <code>async</code>","text":"<p>Task for replacing a namespaced Kubernetes job.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block holding authentication needed to generate the required API client.</p> required <code>job_name</code> <code>str</code> <p>The name of a job to replace.</p> required <code>new_job</code> <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> specification.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to replace this job in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API (e.g. <code>{\"pretty\": \"...\", \"dry_run\": \"...\"}</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Job</code> <p>A Kubernetes <code>V1Job</code> object.</p> Example <p>Replace \"my-job\" in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.jobs import replace_namespaced_job\n\n@flow\ndef kubernetes_orchestrator():\n    v1_job_metadata = replace_namespaced_job(\n        new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}),\n        job_name=\"my-job\",\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/jobs.py</code> <pre><code>@task\nasync def replace_namespaced_job(\n    kubernetes_credentials: KubernetesCredentials,\n    job_name: str,\n    new_job: V1Job,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Job:\n\"\"\"Task for replacing a namespaced Kubernetes job.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block\n            holding authentication needed to generate the required API client.\n        job_name: The name of a job to replace.\n        new_job: A Kubernetes `V1Job` specification.\n        namespace: The Kubernetes namespace to replace this job in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the\n            Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`).\n\n    Returns:\n        A Kubernetes `V1Job` object.\n\n    Example:\n        Replace \"my-job\" in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.jobs import replace_namespaced_job\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_job_metadata = replace_namespaced_job(\n                new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}),\n                job_name=\"my-job\",\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"batch\") as batch_v1_client:\n\n        return await run_sync_in_worker_thread(\n            batch_v1_client.replace_namespaced_job,\n            name=job_name,\n            body=new_job,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/","title":"Pods","text":""},{"location":"pods/#prefect_kubernetes.pods","title":"<code>prefect_kubernetes.pods</code>","text":"<p>Module for interacting with Kubernetes pods from Prefect flows.</p>"},{"location":"pods/#prefect_kubernetes.pods-classes","title":"Classes","text":""},{"location":"pods/#prefect_kubernetes.pods-functions","title":"Functions","text":""},{"location":"pods/#prefect_kubernetes.pods.create_namespaced_pod","title":"<code>create_namespaced_pod</code>  <code>async</code>","text":"<p>Create a Kubernetes pod in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>new_pod</code> <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> specification.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to create this pod in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> Example <p>Create a pod in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import create_namespaced_pod\nfrom kubernetes.client.models import V1Pod\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_metadata = create_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        new_pod=V1Pod(metadata={\"name\": \"test-pod\"}),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def create_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    new_pod: V1Pod,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Pod:\n\"\"\"Create a Kubernetes pod in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        new_pod: A Kubernetes `V1Pod` specification.\n        namespace: The Kubernetes namespace to create this pod in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Pod` object.\n\n    Example:\n        Create a pod in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import create_namespaced_pod\n        from kubernetes.client.models import V1Pod\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_metadata = create_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                new_pod=V1Pod(metadata={\"name\": \"test-pod\"}),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.create_namespaced_pod,\n            namespace=namespace,\n            body=new_pod,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.delete_namespaced_pod","title":"<code>delete_namespaced_pod</code>  <code>async</code>","text":"<p>Delete a Kubernetes pod in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod to delete.</p> required <code>delete_options</code> <code>Optional[V1DeleteOptions]</code> <p>A Kubernetes <code>V1DeleteOptions</code> object.</p> <code>None</code> <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to delete this pod from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> Example <p>Delete a pod in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import delete_namespaced_pod\nfrom kubernetes.client.models import V1DeleteOptions\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_metadata = delete_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        pod_name=\"test-pod\",\n        delete_options=V1DeleteOptions(grace_period_seconds=0),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def delete_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    pod_name: str,\n    delete_options: Optional[V1DeleteOptions] = None,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Pod:\n\"\"\"Delete a Kubernetes pod in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        pod_name: The name of the pod to delete.\n        delete_options: A Kubernetes `V1DeleteOptions` object.\n        namespace: The Kubernetes namespace to delete this pod from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Pod` object.\n\n    Example:\n        Delete a pod in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import delete_namespaced_pod\n        from kubernetes.client.models import V1DeleteOptions\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_metadata = delete_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                pod_name=\"test-pod\",\n                delete_options=V1DeleteOptions(grace_period_seconds=0),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.delete_namespaced_pod,\n            pod_name,\n            body=delete_options,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.list_namespaced_pod","title":"<code>list_namespaced_pod</code>  <code>async</code>","text":"<p>List all pods in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to list pods from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1PodList</code> <p>A Kubernetes <code>V1PodList</code> object.</p> Example <p>List all pods in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import list_namespaced_pod\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_list = list_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\")\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def list_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1PodList:\n\"\"\"List all pods in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        namespace: The Kubernetes namespace to list pods from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1PodList` object.\n\n    Example:\n        List all pods in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import list_namespaced_pod\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_list = list_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\")\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.list_namespaced_pod, namespace=namespace, **kube_kwargs\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.patch_namespaced_pod","title":"<code>patch_namespaced_pod</code>  <code>async</code>","text":"<p>Patch a Kubernetes pod in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod to patch.</p> required <code>pod_updates</code> <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to patch this pod in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> Example <p>Patch a pod in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import patch_namespaced_pod\nfrom kubernetes.client.models import V1Pod\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_metadata = patch_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        pod_name=\"test-pod\",\n        pod_updates=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}),\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def patch_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    pod_name: str,\n    pod_updates: V1Pod,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Pod:\n\"\"\"Patch a Kubernetes pod in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        pod_name: The name of the pod to patch.\n        pod_updates: A Kubernetes `V1Pod` object.\n        namespace: The Kubernetes namespace to patch this pod in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Pod` object.\n\n    Example:\n        Patch a pod in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import patch_namespaced_pod\n        from kubernetes.client.models import V1Pod\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_metadata = patch_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                pod_name=\"test-pod\",\n                pod_updates=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.patch_namespaced_pod,\n            name=pod_name,\n            namespace=namespace,\n            body=pod_updates,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.read_namespaced_pod","title":"<code>read_namespaced_pod</code>  <code>async</code>","text":"<p>Read information on a Kubernetes pod in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod to read.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to read this pod from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> Example <p>Read a pod in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_metadata = read_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        pod_name=\"test-pod\"\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def read_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    pod_name: str,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Pod:\n\"\"\"Read information on a Kubernetes pod in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        pod_name: The name of the pod to read.\n        namespace: The Kubernetes namespace to read this pod from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Pod` object.\n\n    Example:\n        Read a pod in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_metadata = read_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                pod_name=\"test-pod\"\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.read_namespaced_pod,\n            name=pod_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.read_namespaced_pod_log","title":"<code>read_namespaced_pod_log</code>  <code>async</code>","text":"<p>Read logs from a Kubernetes pod in a given namespace.</p> <p>If <code>print_func</code> is provided, the logs will be streamed using that function. If the pod is no longer running, logs generated up to that point will be returned.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod to read logs from.</p> required <code>container</code> <code>str</code> <p>The name of the container to read logs from.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to read this pod from.</p> <code>'default'</code> <code>print_func</code> <code>Optional[Callable]</code> <p>If provided, it will stream the pod logs by calling <code>print_func</code> for every line and returning <code>None</code>. If not provided, the current pod logs will be returned immediately.</p> <code>None</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[str, None]</code> <p>A string containing the logs from the pod's container.</p> Example <p>Read logs from a pod in the default namespace: <pre><code>from prefect import flow, get_run_logger\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import read_namespaced_pod_logs\n\n@flow\ndef kubernetes_orchestrator():\n    logger = get_run_logger()\n\n    pod_logs = read_namespaced_pod_logs(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        pod_name=\"test-pod\",\n        container=\"test-container\",\n        print_func=logger.info\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def read_namespaced_pod_log(\n    kubernetes_credentials: KubernetesCredentials,\n    pod_name: str,\n    container: str,\n    namespace: Optional[str] = \"default\",\n    print_func: Optional[Callable] = None,\n    **kube_kwargs: Dict[str, Any],\n) -&gt; Union[str, None]:\n\"\"\"Read logs from a Kubernetes pod in a given namespace.\n\n    If `print_func` is provided, the logs will be streamed using that function.\n    If the pod is no longer running, logs generated up to that point will be returned.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        pod_name: The name of the pod to read logs from.\n        container: The name of the container to read logs from.\n        namespace: The Kubernetes namespace to read this pod from.\n        print_func: If provided, it will stream the pod logs by calling `print_func`\n            for every line and returning `None`. If not provided, the current pod\n            logs will be returned immediately.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A string containing the logs from the pod's container.\n\n    Example:\n        Read logs from a pod in the default namespace:\n        ```python\n        from prefect import flow, get_run_logger\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import read_namespaced_pod_logs\n\n        @flow\n        def kubernetes_orchestrator():\n            logger = get_run_logger()\n\n            pod_logs = read_namespaced_pod_logs(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                pod_name=\"test-pod\",\n                container=\"test-container\",\n                print_func=logger.info\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        if print_func is not None:\n            # should no longer need to manually refresh on ApiException.status == 410\n            # as of https://github.com/kubernetes-client/python-base/pull/133\n            for log_line in Watch().stream(\n                core_v1_client.read_namespaced_pod_log,\n                name=pod_name,\n                namespace=namespace,\n                container=container,\n            ):\n                print_func(log_line)\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.read_namespaced_pod_log,\n            name=pod_name,\n            namespace=namespace,\n            container=container,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"pods/#prefect_kubernetes.pods.replace_namespaced_pod","title":"<code>replace_namespaced_pod</code>  <code>async</code>","text":"<p>Replace a Kubernetes pod in a given namespace.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>pod_name</code> <code>str</code> <p>The name of the pod to replace.</p> required <code>new_pod</code> <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The Kubernetes namespace to replace this pod in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Dict[str, Any]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Pod</code> <p>A Kubernetes <code>V1Pod</code> object.</p> Example <p>Replace a pod in the default namespace: <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.pods import replace_namespaced_pod\nfrom kubernetes.client.models import V1Pod\n\n@flow\ndef kubernetes_orchestrator():\n    v1_pod_metadata = replace_namespaced_pod(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        pod_name=\"test-pod\",\n        new_pod=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}})\n    )\n</code></pre></p> Source code in <code>prefect_kubernetes/pods.py</code> <pre><code>@task\nasync def replace_namespaced_pod(\n    kubernetes_credentials: KubernetesCredentials,\n    pod_name: str,\n    new_pod: V1Pod,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Dict[str, Any],\n) -&gt; V1Pod:\n\"\"\"Replace a Kubernetes pod in a given namespace.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        pod_name: The name of the pod to replace.\n        new_pod: A Kubernetes `V1Pod` object.\n        namespace: The Kubernetes namespace to replace this pod in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A Kubernetes `V1Pod` object.\n\n    Example:\n        Replace a pod in the default namespace:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.pods import replace_namespaced_pod\n        from kubernetes.client.models import V1Pod\n\n        @flow\n        def kubernetes_orchestrator():\n            v1_pod_metadata = replace_namespaced_pod(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                pod_name=\"test-pod\",\n                new_pod=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}})\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.replace_namespaced_pod,\n            body=new_pod,\n            name=pod_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/","title":"Services","text":""},{"location":"services/#prefect_kubernetes.services","title":"<code>prefect_kubernetes.services</code>","text":"<p>Tasks for working with Kubernetes services.</p>"},{"location":"services/#prefect_kubernetes.services-classes","title":"Classes","text":""},{"location":"services/#prefect_kubernetes.services-functions","title":"Functions","text":""},{"location":"services/#prefect_kubernetes.services.create_namespaced_service","title":"<code>create_namespaced_service</code>  <code>async</code>","text":"<p>Create a namespaced Kubernetes service.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p>A <code>KubernetesCredentials</code> block used to generate a <code>CoreV1Api</code> client.</p> required <code>new_service</code> <code>V1Service</code> <p>A <code>V1Service</code> object representing the service to create.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace to create the service in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Additional keyword arguments to pass to the <code>CoreV1Api</code> method call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Service</code> <p>A <code>V1Service</code> representing the created service.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import create_namespaced_service\nfrom kubernetes.client.models import V1Service\n\n@flow\ndef create_service_flow():\n    v1_service = create_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        new_service=V1Service(metadata={...}, spec={...}),\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def create_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    new_service: V1Service,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1Service:\n\"\"\"Create a namespaced Kubernetes service.\n\n    Args:\n        kubernetes_credentials: A `KubernetesCredentials` block used to generate a\n            `CoreV1Api` client.\n        new_service: A `V1Service` object representing the service to create.\n        namespace: The namespace to create the service in.\n        **kube_kwargs: Additional keyword arguments to pass to the `CoreV1Api`\n            method call.\n\n    Returns:\n        A `V1Service` representing the created service.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import create_namespaced_service\n        from kubernetes.client.models import V1Service\n\n        @flow\n        def create_service_flow():\n            v1_service = create_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                new_service=V1Service(metadata={...}, spec={...}),\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.create_namespaced_service,\n            body=new_service,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/#prefect_kubernetes.services.delete_namespaced_service","title":"<code>delete_namespaced_service</code>  <code>async</code>","text":"<p>Delete a namespaced Kubernetes service.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>service_name</code> <code>str</code> <p>The name of the service to delete.</p> required <code>delete_options</code> <code>Optional[V1DeleteOptions]</code> <p>A <code>V1DeleteOptions</code> object representing the options to delete the service with.</p> <code>None</code> <code>namespace</code> <code>Optional[str]</code> <p>The namespace to delete the service from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Service</code> <p>A <code>V1Service</code> representing the deleted service.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import delete_namespaced_service\n\n@flow\ndef kubernetes_orchestrator():\n    delete_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        service_name=\"my-service\",\n        namespace=\"my-namespace\",\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def delete_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    service_name: str,\n    delete_options: Optional[V1DeleteOptions] = None,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1Service:\n\"\"\"Delete a namespaced Kubernetes service.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        service_name: The name of the service to delete.\n        delete_options: A `V1DeleteOptions` object representing the options to\n            delete the service with.\n        namespace: The namespace to delete the service from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A `V1Service` representing the deleted service.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import delete_namespaced_service\n\n        @flow\n        def kubernetes_orchestrator():\n            delete_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                service_name=\"my-service\",\n                namespace=\"my-namespace\",\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.delete_namespaced_service,\n            name=service_name,\n            namespace=namespace,\n            body=delete_options,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/#prefect_kubernetes.services.list_namespaced_service","title":"<code>list_namespaced_service</code>  <code>async</code>","text":"<p>List namespaced Kubernetes services.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace to list services from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1ServiceList</code> <p>A <code>V1ServiceList</code> representing the list of services in the given namespace.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import list_namespaced_service\n\n@flow\ndef kubernetes_orchestrator():\n    list_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        namespace=\"my-namespace\",\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def list_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1ServiceList:\n\"\"\"List namespaced Kubernetes services.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        namespace: The namespace to list services from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A `V1ServiceList` representing the list of services in the given namespace.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import list_namespaced_service\n\n        @flow\n        def kubernetes_orchestrator():\n            list_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                namespace=\"my-namespace\",\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.list_namespaced_service,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/#prefect_kubernetes.services.patch_namespaced_service","title":"<code>patch_namespaced_service</code>  <code>async</code>","text":"<p>Patch a namespaced Kubernetes service.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>service_name</code> <code>str</code> <p>The name of the service to patch.</p> required <code>service_updates</code> <code>V1Service</code> <p>A <code>V1Service</code> object representing patches to <code>service_name</code>.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace to patch the service in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Service</code> <p>A <code>V1Service</code> representing the patched service.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import patch_namespaced_service\nfrom kubernetes.client.models import V1Service\n\n@flow\ndef kubernetes_orchestrator():\n    patch_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        service_name=\"my-service\",\n        new_service=V1Service(metadata={...}, spec={...}),\n        namespace=\"my-namespace\",\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def patch_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    service_name: str,\n    service_updates: V1Service,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1Service:\n\"\"\"Patch a namespaced Kubernetes service.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        service_name: The name of the service to patch.\n        service_updates: A `V1Service` object representing patches to `service_name`.\n        namespace: The namespace to patch the service in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A `V1Service` representing the patched service.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import patch_namespaced_service\n        from kubernetes.client.models import V1Service\n\n        @flow\n        def kubernetes_orchestrator():\n            patch_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                service_name=\"my-service\",\n                new_service=V1Service(metadata={...}, spec={...}),\n                namespace=\"my-namespace\",\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.patch_namespaced_service,\n            name=service_name,\n            body=service_updates,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/#prefect_kubernetes.services.read_namespaced_service","title":"<code>read_namespaced_service</code>  <code>async</code>","text":"<p>Read a namespaced Kubernetes service.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>service_name</code> <code>str</code> <p>The name of the service to read.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace to read the service from.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Service</code> <p>A <code>V1Service</code> object representing the service.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import read_namespaced_service\n\n@flow\ndef kubernetes_orchestrator():\n    read_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        service_name=\"my-service\",\n        namespace=\"my-namespace\",\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def read_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    service_name: str,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1Service:\n\"\"\"Read a namespaced Kubernetes service.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        service_name: The name of the service to read.\n        namespace: The namespace to read the service from.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A `V1Service` object representing the service.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import read_namespaced_service\n\n        @flow\n        def kubernetes_orchestrator():\n            read_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                service_name=\"my-service\",\n                namespace=\"my-namespace\",\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.read_namespaced_service,\n            name=service_name,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"services/#prefect_kubernetes.services.replace_namespaced_service","title":"<code>replace_namespaced_service</code>  <code>async</code>","text":"<p>Replace a namespaced Kubernetes service.</p> <p>Parameters:</p> Name Type Description Default <code>kubernetes_credentials</code> <code>KubernetesCredentials</code> <p><code>KubernetesCredentials</code> block for creating authenticated Kubernetes API clients.</p> required <code>service_name</code> <code>str</code> <p>The name of the service to replace.</p> required <code>new_service</code> <code>V1Service</code> <p>A <code>V1Service</code> object representing the new service.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace to replace the service in.</p> <code>'default'</code> <code>**kube_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional extra keyword arguments to pass to the Kubernetes API.</p> <code>{}</code> <p>Returns:</p> Type Description <code>V1Service</code> <p>A <code>V1Service</code> representing the new service.</p> Example <pre><code>from prefect import flow\nfrom prefect_kubernetes.credentials import KubernetesCredentials\nfrom prefect_kubernetes.services import replace_namespaced_service\nfrom kubernetes.client.models import V1Service\n\n@flow\ndef kubernetes_orchestrator():\n    replace_namespaced_service(\n        kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n        service_name=\"my-service\",\n        new_service=V1Service(metadata={...}, spec={...}),\n        namespace=\"my-namespace\",\n    )\n</code></pre> Source code in <code>prefect_kubernetes/services.py</code> <pre><code>@task\nasync def replace_namespaced_service(\n    kubernetes_credentials: KubernetesCredentials,\n    service_name: str,\n    new_service: V1Service,\n    namespace: Optional[str] = \"default\",\n    **kube_kwargs: Optional[Dict[str, Any]],\n) -&gt; V1Service:\n\"\"\"Replace a namespaced Kubernetes service.\n\n    Args:\n        kubernetes_credentials: `KubernetesCredentials` block for creating\n            authenticated Kubernetes API clients.\n        service_name: The name of the service to replace.\n        new_service: A `V1Service` object representing the new service.\n        namespace: The namespace to replace the service in.\n        **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API.\n\n    Returns:\n        A `V1Service` representing the new service.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_kubernetes.credentials import KubernetesCredentials\n        from prefect_kubernetes.services import replace_namespaced_service\n        from kubernetes.client.models import V1Service\n\n        @flow\n        def kubernetes_orchestrator():\n            replace_namespaced_service(\n                kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"),\n                service_name=\"my-service\",\n                new_service=V1Service(metadata={...}, spec={...}),\n                namespace=\"my-namespace\",\n            )\n        ```\n    \"\"\"\n    with kubernetes_credentials.get_client(\"core\") as core_v1_client:\n\n        return await run_sync_in_worker_thread(\n            core_v1_client.replace_namespaced_service,\n            name=service_name,\n            body=new_service,\n            namespace=namespace,\n            **kube_kwargs,\n        )\n</code></pre>"},{"location":"utilities/","title":"Utilities","text":""},{"location":"utilities/#prefect_kubernetes.utilities","title":"<code>prefect_kubernetes.utilities</code>","text":"<p>Utilities for working with the Python Kubernetes API.</p>"},{"location":"utilities/#prefect_kubernetes.utilities-functions","title":"Functions","text":""},{"location":"utilities/#prefect_kubernetes.utilities.convert_manifest_to_model","title":"<code>convert_manifest_to_model</code>","text":"<p>Recursively converts a <code>dict</code> representation of a Kubernetes resource to the corresponding Python model containing the Python models that compose it, according to the <code>openapi_types</code> on the class retrieved with <code>v1_model_name</code>.</p> <p>If <code>manifest</code> is a path-like object with a <code>.yaml</code> or <code>.yml</code> extension, it will be treated as a path to a Kubernetes resource manifest and loaded into a <code>dict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>manifest</code> <code>Union[Path, str, KubernetesManifest]</code> <p>A path to a Kubernetes resource manifest or its <code>dict</code> representation.</p> required <code>v1_model_name</code> <code>str</code> <p>The name of a Kubernetes client model to convert the manifest to.</p> required <p>Returns:</p> Type Description <code>V1KubernetesModel</code> <p>A populated instance of a Kubernetes client model with type <code>v1_model_name</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>v1_model_name</code> is not a valid Kubernetes client model name.</p> <code>ValueError</code> <p>If <code>manifest</code> is path-like and is not a valid yaml filename.</p> Source code in <code>prefect_kubernetes/utilities.py</code> <pre><code>def convert_manifest_to_model(\n    manifest: Union[Path, str, KubernetesManifest], v1_model_name: str\n) -&gt; V1KubernetesModel:\n\"\"\"Recursively converts a `dict` representation of a Kubernetes resource to the\n    corresponding Python model containing the Python models that compose it,\n    according to the `openapi_types` on the class retrieved with `v1_model_name`.\n\n    If `manifest` is a path-like object with a `.yaml` or `.yml` extension, it will be\n    treated as a path to a Kubernetes resource manifest and loaded into a `dict`.\n\n    Args:\n        manifest: A path to a Kubernetes resource manifest or its `dict` representation.\n        v1_model_name: The name of a Kubernetes client model to convert the manifest to.\n\n    Returns:\n        A populated instance of a Kubernetes client model with type `v1_model_name`.\n\n    Raises:\n        ValueError: If `v1_model_name` is not a valid Kubernetes client model name.\n        ValueError: If `manifest` is path-like and is not a valid yaml filename.\n    \"\"\"\n    if not manifest:\n        return None\n\n    if not (isinstance(v1_model_name, str) and v1_model_name in set(dir(k8s_models))):\n        raise ValueError(\n            \"`v1_model` must be the name of a valid Kubernetes client model, received \"\n            f\": {v1_model_name!r}\"\n        )\n\n    if isinstance(manifest, (Path, str)):\n        str_path = str(manifest)\n        if not str_path.endswith((\".yaml\", \".yml\")):\n            raise ValueError(\"Manifest must be a valid dict or path to a .yaml file.\")\n        manifest = KubernetesJob.job_from_file(manifest)\n\n    converted_manifest = {}\n    v1_model = getattr(k8s_models, v1_model_name)\n    valid_supplied_fields = (  # valid and specified fields for current `v1_model_name`\n        (k, v)\n        for k, v in v1_model.openapi_types.items()\n        if v1_model.attribute_map[k] in manifest  # map goes \ud83d\udc0d -&gt; \ud83d\udc2b, user supplies \ud83d\udc2b\n    )\n\n    for field, value_type in valid_supplied_fields:\n        if value_type.startswith(\"V1\"):  # field value is another model\n            converted_manifest[field] = convert_manifest_to_model(\n                manifest[v1_model.attribute_map[field]], value_type\n            )\n        elif value_type.startswith(\"list[V1\"):  # field value is a list of models\n            field_item_type = value_type.replace(\"list[\", \"\").replace(\"]\", \"\")\n            try:\n                converted_manifest[field] = [\n                    convert_manifest_to_model(item, field_item_type)\n                    for item in manifest[v1_model.attribute_map[field]]\n                ]\n            except TypeError:\n                converted_manifest[field] = manifest[v1_model.attribute_map[field]]\n        elif value_type in base_types:  # field value is a primitive Python type\n            converted_manifest[field] = manifest[v1_model.attribute_map[field]]\n\n    return v1_model(**converted_manifest)\n</code></pre>"}]}