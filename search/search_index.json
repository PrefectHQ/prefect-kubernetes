{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-kubernetes Welcome! prefect-kubernetes is a collection of Prefect tasks, flows, and blocks enabling orchestration, observation and management of Kubernetes resources. Jump to examples . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-kubernetes with pip : pip install prefect-kubernetes Then, to register blocks on Prefect Cloud: prefect block register -m prefect_kubernetes Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Example Usage Use with_options to customize options on any existing task or flow from prefect_kubernetes.flows import run_namespaced_job customized_run_namespaced_job = run_namespaced_job . with_options ( name = \"My flow running a Kubernetes Job\" , retries = 2 , retry_delay_seconds = 10 , ) # this is now a new flow object that can be called For more tips on how to use tasks and flows in a Collection, check out Using Collections ! Specify and run a Kubernetes Job from a yaml file from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.flows import run_namespaced_job # this is a flow from prefect_kubernetes.jobs import KubernetesJob k8s_creds = KubernetesCredentials . load ( \"k8s-creds\" ) job = KubernetesJob . from_yaml_file ( # or create in the UI with a dict manifest credentials = k8s_creds , manifest_path = \"path/to/job.yaml\" , ) job . save ( \"my-k8s-job\" , overwrite = True ) if __name__ == \"__main__\" : # run the flow run_namespaced_job ( job ) Generate a resource-specific client from KubernetesClusterConfig # with minikube / docker desktop & a valid ~/.kube/config this should ~just work~\u2122\ufe0f from prefect.blocks.kubernetes import KubernetesClusterConfig from prefect_kubernetes.credentials import KubernetesCredentials k8s_config = KubernetesClusterConfig . from_file ( '~/.kube/config' ) k8s_credentials = KubernetesCredentials ( cluster_config = k8s_config ) with k8s_credentials . get_client ( \"core\" ) as v1_core_client : for namespace in v1_core_client . list_namespace () . items : print ( namespace . metadata . name ) List jobs in a specific namespace from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator (): v1_job_list = list_namespaced_job ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), namespace = \"my-namespace\" , ) Patch an existing deployment from kubernetes.client.models import V1Deployment from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from prefect_kubernetes.utilities import convert_manifest_to_model @flow def kubernetes_orchestrator (): v1_deployment_updates = convert_manifest_to_model ( manifest = \"path/to/manifest.yaml\" , v1_model_name = \"V1Deployment\" , ) v1_deployment = patch_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"my-deployment\" , deployment_updates = v1_deployment_updates , namespace = \"my-namespace\" ) Resources If you encounter any bugs while using prefect-kubernetes , feel free to open an issue in the prefect-kubernetes repository. If you have any questions or issues while using prefect-kubernetes , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-kubernetes for updates too! Development If you'd like to install a version of prefect-kubernetes for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-kubernetes.git cd prefect-kubernetes/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-kubernetes","text":"","title":"prefect-kubernetes"},{"location":"#welcome","text":"prefect-kubernetes is a collection of Prefect tasks, flows, and blocks enabling orchestration, observation and management of Kubernetes resources. Jump to examples .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-kubernetes with pip : pip install prefect-kubernetes Then, to register blocks on Prefect Cloud: prefect block register -m prefect_kubernetes Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#example-usage","text":"","title":"Example Usage"},{"location":"#use-with_options-to-customize-options-on-any-existing-task-or-flow","text":"from prefect_kubernetes.flows import run_namespaced_job customized_run_namespaced_job = run_namespaced_job . with_options ( name = \"My flow running a Kubernetes Job\" , retries = 2 , retry_delay_seconds = 10 , ) # this is now a new flow object that can be called For more tips on how to use tasks and flows in a Collection, check out Using Collections !","title":"Use with_options to customize options on any existing task or flow"},{"location":"#specify-and-run-a-kubernetes-job-from-a-yaml-file","text":"from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.flows import run_namespaced_job # this is a flow from prefect_kubernetes.jobs import KubernetesJob k8s_creds = KubernetesCredentials . load ( \"k8s-creds\" ) job = KubernetesJob . from_yaml_file ( # or create in the UI with a dict manifest credentials = k8s_creds , manifest_path = \"path/to/job.yaml\" , ) job . save ( \"my-k8s-job\" , overwrite = True ) if __name__ == \"__main__\" : # run the flow run_namespaced_job ( job )","title":"Specify and run a Kubernetes Job from a yaml file"},{"location":"#generate-a-resource-specific-client-from-kubernetesclusterconfig","text":"# with minikube / docker desktop & a valid ~/.kube/config this should ~just work~\u2122\ufe0f from prefect.blocks.kubernetes import KubernetesClusterConfig from prefect_kubernetes.credentials import KubernetesCredentials k8s_config = KubernetesClusterConfig . from_file ( '~/.kube/config' ) k8s_credentials = KubernetesCredentials ( cluster_config = k8s_config ) with k8s_credentials . get_client ( \"core\" ) as v1_core_client : for namespace in v1_core_client . list_namespace () . items : print ( namespace . metadata . name )","title":"Generate a resource-specific client from KubernetesClusterConfig"},{"location":"#list-jobs-in-a-specific-namespace","text":"from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator (): v1_job_list = list_namespaced_job ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), namespace = \"my-namespace\" , )","title":"List jobs in a specific namespace"},{"location":"#patch-an-existing-deployment","text":"from kubernetes.client.models import V1Deployment from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from prefect_kubernetes.utilities import convert_manifest_to_model @flow def kubernetes_orchestrator (): v1_deployment_updates = convert_manifest_to_model ( manifest = \"path/to/manifest.yaml\" , v1_model_name = \"V1Deployment\" , ) v1_deployment = patch_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"my-deployment\" , deployment_updates = v1_deployment_updates , namespace = \"my-namespace\" )","title":"Patch an existing deployment"},{"location":"#resources","text":"If you encounter any bugs while using prefect-kubernetes , feel free to open an issue in the prefect-kubernetes repository. If you have any questions or issues while using prefect-kubernetes , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-kubernetes for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-kubernetes for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-kubernetes.git cd prefect-kubernetes/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_kubernetes.credentials Module for defining Kubernetes credential handling and client generation. Classes KubernetesCredentials Bases: Block Credentials block for generating configured Kubernetes API clients. Attributes: Name Type Description cluster_config Optional [ KubernetesClusterConfig ] A KubernetesClusterConfig block holding a JSON kube config for a specific kubernetes context. Example Load stored Kubernetes credentials: from prefect_kubernetes.credentials import KubernetesCredentials kubernetes_credentials = KubernetesCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_kubernetes/credentials.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class KubernetesCredentials ( Block ): \"\"\"Credentials block for generating configured Kubernetes API clients. Attributes: cluster_config: A `KubernetesClusterConfig` block holding a JSON kube config for a specific kubernetes context. Example: Load stored Kubernetes credentials: ```python from prefect_kubernetes.credentials import KubernetesCredentials kubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Kubernetes Credentials\" _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/oYuHjIbc26oilfQSEMjRv/a61f5f6ef406eead2df5231835b4c4c2/logo.png?h=250\" # noqa cluster_config : Optional [ KubernetesClusterConfig ] = None @contextmanager def get_client ( self , client_type : Literal [ \"apps\" , \"batch\" , \"core\" ], configuration : Optional [ Configuration ] = None , ) -> Generator [ KubernetesClient , None , None ]: \"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources. Args: client_type: The resource-specific type of Kubernetes client to retrieve. Yields: An authenticated, resource-specific Kubernetes API client. Example: ```python from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials.get_client(\"core\") as core_v1_client: for pod in core_v1_client.list_namespaced_pod(): print(pod.metadata.name) ``` \"\"\" client_config = configuration or Configuration () with ApiClient ( configuration = client_config ) as generic_client : try : yield self . get_resource_specific_client ( client_type ) finally : generic_client . rest_client . pool_manager . clear () def get_resource_specific_client ( self , client_type : str , ) -> Union [ AppsV1Api , BatchV1Api , CoreV1Api ]: \"\"\" Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: 1. It will first attempt to use a `KubernetesCredentials` block's `cluster_config` to configure a client using `KubernetesClusterConfig.configure_client`. 2. Attempt in-cluster connection (will only work when running on a pod). 3. Attempt out-of-cluster connection using the default location for a kube config file. Args: client_type: The Kubernetes API client type for interacting with specific Kubernetes resources. Returns: KubernetesClient: An authenticated, resource-specific Kubernetes Client. Raises: ValueError: If `client_type` is not a valid Kubernetes API client type. \"\"\" if self . cluster_config : self . cluster_config . configure_client () else : try : kube_config . load_incluster_config () except ConfigException : kube_config . load_kube_config () try : return K8S_CLIENT_TYPES [ client_type ]() except KeyError : raise ValueError ( f \"Invalid client type provided ' { client_type } '.\" f \" Must be one of { listrepr ( K8S_CLIENT_TYPES . keys ()) } .\" ) Functions get_client Convenience method for retrieving a Kubernetes API client for deployment resources. Parameters: Name Type Description Default client_type Literal [ apps , batch , core ] The resource-specific type of Kubernetes client to retrieve. required Yields: Type Description Generator [ KubernetesClient , None, None] An authenticated, resource-specific Kubernetes API client. Example from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials . get_client ( \"core\" ) as core_v1_client : for pod in core_v1_client . list_namespaced_pod (): print ( pod . metadata . name ) Source code in prefect_kubernetes/credentials.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 @contextmanager def get_client ( self , client_type : Literal [ \"apps\" , \"batch\" , \"core\" ], configuration : Optional [ Configuration ] = None , ) -> Generator [ KubernetesClient , None , None ]: \"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources. Args: client_type: The resource-specific type of Kubernetes client to retrieve. Yields: An authenticated, resource-specific Kubernetes API client. Example: ```python from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials.get_client(\"core\") as core_v1_client: for pod in core_v1_client.list_namespaced_pod(): print(pod.metadata.name) ``` \"\"\" client_config = configuration or Configuration () with ApiClient ( configuration = client_config ) as generic_client : try : yield self . get_resource_specific_client ( client_type ) finally : generic_client . rest_client . pool_manager . clear () get_resource_specific_client Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: It will first attempt to use a KubernetesCredentials block's cluster_config to configure a client using KubernetesClusterConfig.configure_client . Attempt in-cluster connection (will only work when running on a pod). Attempt out-of-cluster connection using the default location for a kube config file. Parameters: Name Type Description Default client_type str The Kubernetes API client type for interacting with specific Kubernetes resources. required Returns: Name Type Description KubernetesClient Union [ AppsV1Api , BatchV1Api , CoreV1Api ] An authenticated, resource-specific Kubernetes Client. Raises: Type Description ValueError If client_type is not a valid Kubernetes API client type. Source code in prefect_kubernetes/credentials.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def get_resource_specific_client ( self , client_type : str , ) -> Union [ AppsV1Api , BatchV1Api , CoreV1Api ]: \"\"\" Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: 1. It will first attempt to use a `KubernetesCredentials` block's `cluster_config` to configure a client using `KubernetesClusterConfig.configure_client`. 2. Attempt in-cluster connection (will only work when running on a pod). 3. Attempt out-of-cluster connection using the default location for a kube config file. Args: client_type: The Kubernetes API client type for interacting with specific Kubernetes resources. Returns: KubernetesClient: An authenticated, resource-specific Kubernetes Client. Raises: ValueError: If `client_type` is not a valid Kubernetes API client type. \"\"\" if self . cluster_config : self . cluster_config . configure_client () else : try : kube_config . load_incluster_config () except ConfigException : kube_config . load_kube_config () try : return K8S_CLIENT_TYPES [ client_type ]() except KeyError : raise ValueError ( f \"Invalid client type provided ' { client_type } '.\" f \" Must be one of { listrepr ( K8S_CLIENT_TYPES . keys ()) } .\" )","title":"Credentials"},{"location":"credentials/#prefect_kubernetes.credentials","text":"Module for defining Kubernetes credential handling and client generation.","title":"credentials"},{"location":"credentials/#prefect_kubernetes.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials","text":"Bases: Block Credentials block for generating configured Kubernetes API clients. Attributes: Name Type Description cluster_config Optional [ KubernetesClusterConfig ] A KubernetesClusterConfig block holding a JSON kube config for a specific kubernetes context. Example Load stored Kubernetes credentials: from prefect_kubernetes.credentials import KubernetesCredentials kubernetes_credentials = KubernetesCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_kubernetes/credentials.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class KubernetesCredentials ( Block ): \"\"\"Credentials block for generating configured Kubernetes API clients. Attributes: cluster_config: A `KubernetesClusterConfig` block holding a JSON kube config for a specific kubernetes context. Example: Load stored Kubernetes credentials: ```python from prefect_kubernetes.credentials import KubernetesCredentials kubernetes_credentials = KubernetesCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Kubernetes Credentials\" _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/oYuHjIbc26oilfQSEMjRv/a61f5f6ef406eead2df5231835b4c4c2/logo.png?h=250\" # noqa cluster_config : Optional [ KubernetesClusterConfig ] = None @contextmanager def get_client ( self , client_type : Literal [ \"apps\" , \"batch\" , \"core\" ], configuration : Optional [ Configuration ] = None , ) -> Generator [ KubernetesClient , None , None ]: \"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources. Args: client_type: The resource-specific type of Kubernetes client to retrieve. Yields: An authenticated, resource-specific Kubernetes API client. Example: ```python from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials.get_client(\"core\") as core_v1_client: for pod in core_v1_client.list_namespaced_pod(): print(pod.metadata.name) ``` \"\"\" client_config = configuration or Configuration () with ApiClient ( configuration = client_config ) as generic_client : try : yield self . get_resource_specific_client ( client_type ) finally : generic_client . rest_client . pool_manager . clear () def get_resource_specific_client ( self , client_type : str , ) -> Union [ AppsV1Api , BatchV1Api , CoreV1Api ]: \"\"\" Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: 1. It will first attempt to use a `KubernetesCredentials` block's `cluster_config` to configure a client using `KubernetesClusterConfig.configure_client`. 2. Attempt in-cluster connection (will only work when running on a pod). 3. Attempt out-of-cluster connection using the default location for a kube config file. Args: client_type: The Kubernetes API client type for interacting with specific Kubernetes resources. Returns: KubernetesClient: An authenticated, resource-specific Kubernetes Client. Raises: ValueError: If `client_type` is not a valid Kubernetes API client type. \"\"\" if self . cluster_config : self . cluster_config . configure_client () else : try : kube_config . load_incluster_config () except ConfigException : kube_config . load_kube_config () try : return K8S_CLIENT_TYPES [ client_type ]() except KeyError : raise ValueError ( f \"Invalid client type provided ' { client_type } '.\" f \" Must be one of { listrepr ( K8S_CLIENT_TYPES . keys ()) } .\" )","title":"KubernetesCredentials"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials.get_client","text":"Convenience method for retrieving a Kubernetes API client for deployment resources. Parameters: Name Type Description Default client_type Literal [ apps , batch , core ] The resource-specific type of Kubernetes client to retrieve. required Yields: Type Description Generator [ KubernetesClient , None, None] An authenticated, resource-specific Kubernetes API client. Example from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials . get_client ( \"core\" ) as core_v1_client : for pod in core_v1_client . list_namespaced_pod (): print ( pod . metadata . name ) Source code in prefect_kubernetes/credentials.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 @contextmanager def get_client ( self , client_type : Literal [ \"apps\" , \"batch\" , \"core\" ], configuration : Optional [ Configuration ] = None , ) -> Generator [ KubernetesClient , None , None ]: \"\"\"Convenience method for retrieving a Kubernetes API client for deployment resources. Args: client_type: The resource-specific type of Kubernetes client to retrieve. Yields: An authenticated, resource-specific Kubernetes API client. Example: ```python from prefect_kubernetes.credentials import KubernetesCredentials with KubernetesCredentials.get_client(\"core\") as core_v1_client: for pod in core_v1_client.list_namespaced_pod(): print(pod.metadata.name) ``` \"\"\" client_config = configuration or Configuration () with ApiClient ( configuration = client_config ) as generic_client : try : yield self . get_resource_specific_client ( client_type ) finally : generic_client . rest_client . pool_manager . clear ()","title":"get_client()"},{"location":"credentials/#prefect_kubernetes.credentials.KubernetesCredentials.get_resource_specific_client","text":"Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: It will first attempt to use a KubernetesCredentials block's cluster_config to configure a client using KubernetesClusterConfig.configure_client . Attempt in-cluster connection (will only work when running on a pod). Attempt out-of-cluster connection using the default location for a kube config file. Parameters: Name Type Description Default client_type str The Kubernetes API client type for interacting with specific Kubernetes resources. required Returns: Name Type Description KubernetesClient Union [ AppsV1Api , BatchV1Api , CoreV1Api ] An authenticated, resource-specific Kubernetes Client. Raises: Type Description ValueError If client_type is not a valid Kubernetes API client type. Source code in prefect_kubernetes/credentials.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 def get_resource_specific_client ( self , client_type : str , ) -> Union [ AppsV1Api , BatchV1Api , CoreV1Api ]: \"\"\" Utility function for configuring a generic Kubernetes client. It will attempt to connect to a Kubernetes cluster in three steps with the first successful connection attempt becoming the mode of communication with a cluster: 1. It will first attempt to use a `KubernetesCredentials` block's `cluster_config` to configure a client using `KubernetesClusterConfig.configure_client`. 2. Attempt in-cluster connection (will only work when running on a pod). 3. Attempt out-of-cluster connection using the default location for a kube config file. Args: client_type: The Kubernetes API client type for interacting with specific Kubernetes resources. Returns: KubernetesClient: An authenticated, resource-specific Kubernetes Client. Raises: ValueError: If `client_type` is not a valid Kubernetes API client type. \"\"\" if self . cluster_config : self . cluster_config . configure_client () else : try : kube_config . load_incluster_config () except ConfigException : kube_config . load_kube_config () try : return K8S_CLIENT_TYPES [ client_type ]() except KeyError : raise ValueError ( f \"Invalid client type provided ' { client_type } '.\" f \" Must be one of { listrepr ( K8S_CLIENT_TYPES . keys ()) } .\" )","title":"get_resource_specific_client()"},{"location":"deployments/","text":"prefect_kubernetes.deployments Module for interacting with Kubernetes deployments from Prefect flows. Classes Functions create_namespaced_deployment async Create a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required new_deployment V1Deployment A Kubernetes V1Deployment specification. required namespace Optional [ str ] The Kubernetes namespace to create this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Create a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import create_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = create_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_deployment = V1Deployment ( metadata = { \"name\" : \"test-deployment\" }), ) Source code in prefect_kubernetes/deployments.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @task async def create_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , new_deployment : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Create a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. new_deployment: A Kubernetes `V1Deployment` specification. namespace: The Kubernetes namespace to create this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Create a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import create_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = create_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_deployment=V1Deployment(metadata={\"name\": \"test-deployment\"}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_deployment , namespace = namespace , body = new_deployment , ** kube_kwargs , ) delete_namespaced_deployment async Delete a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this deployment from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Delete a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import delete_namespaced_deployment from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator (): v1_deployment_metadata = delete_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , delete_options = V1DeleteOptions ( grace_period_seconds = 0 ), ) Source code in prefect_kubernetes/deployments.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 @task async def delete_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Delete a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this deployment from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Delete a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import delete_namespaced_deployment from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator(): v1_deployment_metadata = delete_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", delete_options=V1DeleteOptions(grace_period_seconds=0), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_deployment , deployment_name , body = delete_options , namespace = namespace , ** kube_kwargs , ) list_namespaced_deployment async List all deployments in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The Kubernetes namespace to list deployments from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1DeploymentList A Kubernetes V1DeploymentList object. Example List all deployments in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import list_namespaced_deployment @flow def kubernetes_orchestrator (): v1_deployment_list = list_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ) ) Source code in prefect_kubernetes/deployments.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def list_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1DeploymentList : \"\"\"List all deployments in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The Kubernetes namespace to list deployments from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1DeploymentList` object. Example: List all deployments in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import list_namespaced_deployment @flow def kubernetes_orchestrator(): v1_deployment_list = list_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\") ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_deployment , namespace = namespace , ** kube_kwargs , ) patch_namespaced_deployment async Patch a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to patch. required deployment_updates V1Deployment A Kubernetes V1Deployment object. required namespace Optional [ str ] The Kubernetes namespace to patch this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Patch a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = patch_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , deployment_updates = V1Deployment ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), ) Source code in prefect_kubernetes/deployments.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @task async def patch_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , deployment_updates : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Patch a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to patch. deployment_updates: A Kubernetes `V1Deployment` object. namespace: The Kubernetes namespace to patch this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Patch a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = patch_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", deployment_updates=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_deployment , name = deployment_name , namespace = namespace , body = deployment_updates , ** kube_kwargs , ) read_namespaced_deployment async Read information on a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to read. required namespace Optional [ str ] The Kubernetes namespace to read this deployment from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Read a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator (): v1_deployment_metadata = read_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" ) Source code in prefect_kubernetes/deployments.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @task async def read_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Read information on a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to read. namespace: The Kubernetes namespace to read this deployment from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Read a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator(): v1_deployment_metadata = read_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\" ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_deployment , name = deployment_name , namespace = namespace , ** kube_kwargs , ) replace_namespaced_deployment async Replace a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to replace. required new_deployment V1Deployment A Kubernetes V1Deployment object. required namespace Optional [ str ] The Kubernetes namespace to replace this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Replace a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import replace_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = replace_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , new_deployment = V1Deployment ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}) ) Source code in prefect_kubernetes/deployments.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 @task async def replace_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , new_deployment : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Replace a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to replace. new_deployment: A Kubernetes `V1Deployment` object. namespace: The Kubernetes namespace to replace this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Replace a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import replace_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = replace_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", new_deployment=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}) ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_deployment , body = new_deployment , name = deployment_name , namespace = namespace , ** kube_kwargs , )","title":"Deployments"},{"location":"deployments/#prefect_kubernetes.deployments","text":"Module for interacting with Kubernetes deployments from Prefect flows.","title":"deployments"},{"location":"deployments/#prefect_kubernetes.deployments-classes","text":"","title":"Classes"},{"location":"deployments/#prefect_kubernetes.deployments-functions","text":"","title":"Functions"},{"location":"deployments/#prefect_kubernetes.deployments.create_namespaced_deployment","text":"Create a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required new_deployment V1Deployment A Kubernetes V1Deployment specification. required namespace Optional [ str ] The Kubernetes namespace to create this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Create a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import create_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = create_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_deployment = V1Deployment ( metadata = { \"name\" : \"test-deployment\" }), ) Source code in prefect_kubernetes/deployments.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @task async def create_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , new_deployment : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Create a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. new_deployment: A Kubernetes `V1Deployment` specification. namespace: The Kubernetes namespace to create this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Create a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import create_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = create_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_deployment=V1Deployment(metadata={\"name\": \"test-deployment\"}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_deployment , namespace = namespace , body = new_deployment , ** kube_kwargs , )","title":"create_namespaced_deployment()"},{"location":"deployments/#prefect_kubernetes.deployments.delete_namespaced_deployment","text":"Delete a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this deployment from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Delete a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import delete_namespaced_deployment from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator (): v1_deployment_metadata = delete_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , delete_options = V1DeleteOptions ( grace_period_seconds = 0 ), ) Source code in prefect_kubernetes/deployments.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 @task async def delete_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Delete a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this deployment from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Delete a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import delete_namespaced_deployment from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator(): v1_deployment_metadata = delete_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", delete_options=V1DeleteOptions(grace_period_seconds=0), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_deployment , deployment_name , body = delete_options , namespace = namespace , ** kube_kwargs , )","title":"delete_namespaced_deployment()"},{"location":"deployments/#prefect_kubernetes.deployments.list_namespaced_deployment","text":"List all deployments in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The Kubernetes namespace to list deployments from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1DeploymentList A Kubernetes V1DeploymentList object. Example List all deployments in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import list_namespaced_deployment @flow def kubernetes_orchestrator (): v1_deployment_list = list_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ) ) Source code in prefect_kubernetes/deployments.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def list_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1DeploymentList : \"\"\"List all deployments in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The Kubernetes namespace to list deployments from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1DeploymentList` object. Example: List all deployments in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import list_namespaced_deployment @flow def kubernetes_orchestrator(): v1_deployment_list = list_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\") ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_deployment , namespace = namespace , ** kube_kwargs , )","title":"list_namespaced_deployment()"},{"location":"deployments/#prefect_kubernetes.deployments.patch_namespaced_deployment","text":"Patch a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to patch. required deployment_updates V1Deployment A Kubernetes V1Deployment object. required namespace Optional [ str ] The Kubernetes namespace to patch this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Patch a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = patch_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , deployment_updates = V1Deployment ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), ) Source code in prefect_kubernetes/deployments.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @task async def patch_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , deployment_updates : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Patch a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to patch. deployment_updates: A Kubernetes `V1Deployment` object. namespace: The Kubernetes namespace to patch this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Patch a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import patch_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = patch_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", deployment_updates=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_deployment , name = deployment_name , namespace = namespace , body = deployment_updates , ** kube_kwargs , )","title":"patch_namespaced_deployment()"},{"location":"deployments/#prefect_kubernetes.deployments.read_namespaced_deployment","text":"Read information on a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to read. required namespace Optional [ str ] The Kubernetes namespace to read this deployment from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Read a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator (): v1_deployment_metadata = read_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" ) Source code in prefect_kubernetes/deployments.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @task async def read_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Read information on a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to read. namespace: The Kubernetes namespace to read this deployment from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Read a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator(): v1_deployment_metadata = read_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\" ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_deployment , name = deployment_name , namespace = namespace , ** kube_kwargs , )","title":"read_namespaced_deployment()"},{"location":"deployments/#prefect_kubernetes.deployments.replace_namespaced_deployment","text":"Replace a Kubernetes deployment in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required deployment_name str The name of the deployment to replace. required new_deployment V1Deployment A Kubernetes V1Deployment object. required namespace Optional [ str ] The Kubernetes namespace to replace this deployment in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Deployment A Kubernetes V1Deployment object. Example Replace a deployment in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import replace_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator (): v1_deployment_metadata = replace_namespaced_deployment ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), deployment_name = \"test-deployment\" , new_deployment = V1Deployment ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}) ) Source code in prefect_kubernetes/deployments.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 @task async def replace_namespaced_deployment ( kubernetes_credentials : KubernetesCredentials , deployment_name : str , new_deployment : V1Deployment , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Deployment : \"\"\"Replace a Kubernetes deployment in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. deployment_name: The name of the deployment to replace. new_deployment: A Kubernetes `V1Deployment` object. namespace: The Kubernetes namespace to replace this deployment in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Deployment` object. Example: Replace a deployment in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.deployments import replace_namespaced_deployment from kubernetes.client.models import V1Deployment @flow def kubernetes_orchestrator(): v1_deployment_metadata = replace_namespaced_deployment( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), deployment_name=\"test-deployment\", new_deployment=V1Deployment(metadata={\"labels\": {\"foo\": \"bar\"}}) ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_deployment , body = new_deployment , name = deployment_name , namespace = namespace , ** kube_kwargs , )","title":"replace_namespaced_deployment()"},{"location":"exceptions/","text":"prefect_kubernetes.exceptions Module to define common exceptions within prefect_kubernetes . Classes KubernetesJobDefinitionError Bases: OpenApiException An exception for when a Kubernetes job definition is invalid. Source code in prefect_kubernetes/exceptions.py 6 7 class KubernetesJobDefinitionError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job definition is invalid.\"\"\" KubernetesJobFailedError Bases: OpenApiException An exception for when a Kubernetes job fails. Source code in prefect_kubernetes/exceptions.py 10 11 class KubernetesJobFailedError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job fails.\"\"\" KubernetesJobTimeoutError Bases: OpenApiException An exception for when a Kubernetes job times out. Source code in prefect_kubernetes/exceptions.py 18 19 class KubernetesJobTimeoutError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job times out.\"\"\" KubernetesResourceNotFoundError Bases: ApiException An exception for when a Kubernetes resource cannot be found by a client. Source code in prefect_kubernetes/exceptions.py 14 15 class KubernetesResourceNotFoundError ( ApiException ): \"\"\"An exception for when a Kubernetes resource cannot be found by a client.\"\"\"","title":"Exceptions"},{"location":"exceptions/#prefect_kubernetes.exceptions","text":"Module to define common exceptions within prefect_kubernetes .","title":"exceptions"},{"location":"exceptions/#prefect_kubernetes.exceptions-classes","text":"","title":"Classes"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobDefinitionError","text":"Bases: OpenApiException An exception for when a Kubernetes job definition is invalid. Source code in prefect_kubernetes/exceptions.py 6 7 class KubernetesJobDefinitionError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job definition is invalid.\"\"\"","title":"KubernetesJobDefinitionError"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobFailedError","text":"Bases: OpenApiException An exception for when a Kubernetes job fails. Source code in prefect_kubernetes/exceptions.py 10 11 class KubernetesJobFailedError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job fails.\"\"\"","title":"KubernetesJobFailedError"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesJobTimeoutError","text":"Bases: OpenApiException An exception for when a Kubernetes job times out. Source code in prefect_kubernetes/exceptions.py 18 19 class KubernetesJobTimeoutError ( OpenApiException ): \"\"\"An exception for when a Kubernetes job times out.\"\"\"","title":"KubernetesJobTimeoutError"},{"location":"exceptions/#prefect_kubernetes.exceptions.KubernetesResourceNotFoundError","text":"Bases: ApiException An exception for when a Kubernetes resource cannot be found by a client. Source code in prefect_kubernetes/exceptions.py 14 15 class KubernetesResourceNotFoundError ( ApiException ): \"\"\"An exception for when a Kubernetes resource cannot be found by a client.\"\"\"","title":"KubernetesResourceNotFoundError"},{"location":"flows/","text":"prefect_kubernetes.flows A module to define flows interacting with Kubernetes resources. Classes Functions run_namespaced_job async Flow for running a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_job KubernetesJob The KubernetesJob block that specifies the job to run. required Returns: Type Description Dict [ str , Any ] The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}. Raises: Type Description RuntimeError If the created Kubernetes job attains a failed status. Example from prefect_kubernetes import KubernetesJob , run_namespaced_job from prefect_kubernetes.credentials import KubernetesCredentials run_namespaced_job ( kubernetes_job = KubernetesJob . from_yaml_file ( credentials = KubernetesCredentials . load ( \"k8s-creds\" ), manifest_path = \"path/to/job.yaml\" , ) ) Source code in prefect_kubernetes/flows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @flow async def run_namespaced_job ( kubernetes_job : KubernetesJob , ) -> Dict [ str , Any ]: \"\"\"Flow for running a namespaced Kubernetes job. Args: kubernetes_job: The `KubernetesJob` block that specifies the job to run. Returns: The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}. Raises: RuntimeError: If the created Kubernetes job attains a failed status. Example: ```python from prefect_kubernetes import KubernetesJob, run_namespaced_job from prefect_kubernetes.credentials import KubernetesCredentials run_namespaced_job( kubernetes_job=KubernetesJob.from_yaml_file( credentials=KubernetesCredentials.load(\"k8s-creds\"), manifest_path=\"path/to/job.yaml\", ) ) ``` \"\"\" kubernetes_job_run = await task ( kubernetes_job . trigger )() await task ( kubernetes_job_run . wait_for_completion )() return await task ( kubernetes_job_run . fetch_result )()","title":"Flows"},{"location":"flows/#prefect_kubernetes.flows","text":"A module to define flows interacting with Kubernetes resources.","title":"flows"},{"location":"flows/#prefect_kubernetes.flows-classes","text":"","title":"Classes"},{"location":"flows/#prefect_kubernetes.flows-functions","text":"","title":"Functions"},{"location":"flows/#prefect_kubernetes.flows.run_namespaced_job","text":"Flow for running a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_job KubernetesJob The KubernetesJob block that specifies the job to run. required Returns: Type Description Dict [ str , Any ] The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}. Raises: Type Description RuntimeError If the created Kubernetes job attains a failed status. Example from prefect_kubernetes import KubernetesJob , run_namespaced_job from prefect_kubernetes.credentials import KubernetesCredentials run_namespaced_job ( kubernetes_job = KubernetesJob . from_yaml_file ( credentials = KubernetesCredentials . load ( \"k8s-creds\" ), manifest_path = \"path/to/job.yaml\" , ) ) Source code in prefect_kubernetes/flows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @flow async def run_namespaced_job ( kubernetes_job : KubernetesJob , ) -> Dict [ str , Any ]: \"\"\"Flow for running a namespaced Kubernetes job. Args: kubernetes_job: The `KubernetesJob` block that specifies the job to run. Returns: The a dict of logs from each pod in the job, e.g. {'pod_name': 'pod_log_str'}. Raises: RuntimeError: If the created Kubernetes job attains a failed status. Example: ```python from prefect_kubernetes import KubernetesJob, run_namespaced_job from prefect_kubernetes.credentials import KubernetesCredentials run_namespaced_job( kubernetes_job=KubernetesJob.from_yaml_file( credentials=KubernetesCredentials.load(\"k8s-creds\"), manifest_path=\"path/to/job.yaml\", ) ) ``` \"\"\" kubernetes_job_run = await task ( kubernetes_job . trigger )() await task ( kubernetes_job_run . wait_for_completion )() return await task ( kubernetes_job_run . fetch_result )()","title":"run_namespaced_job()"},{"location":"jobs/","text":"prefect_kubernetes.jobs Module to define tasks for interacting with Kubernetes jobs. Classes KubernetesJob Bases: JobBlock A block representing a Kubernetes job configuration. Source code in prefect_kubernetes/jobs.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 class KubernetesJob ( JobBlock ): \"\"\"A block representing a Kubernetes job configuration.\"\"\" v1_job : Dict [ str , Any ] = Field ( default =... , title = \"Job Manifest\" , description = ( \"The Kubernetes job manifest to run. This dictionary can be produced \" \"using `yaml.safe_load`.\" ), ) api_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional API Arguments\" , description = \"Additional arguments to include in Kubernetes API calls.\" , example = { \"pretty\" : \"true\" }, ) credentials : KubernetesCredentials = Field ( default =... , description = \"The credentials to configure a client from.\" ) delete_after_completion : bool = Field ( default = True , description = \"Whether to delete the job after it has completed.\" , ) interval_seconds : int = Field ( default = 5 , description = \"The number of seconds to wait between job status checks.\" , ) namespace : str = Field ( default = \"default\" , description = \"The namespace to create and run the job in.\" , ) timeout_seconds : Optional [ int ] = Field ( default = None , description = \"The number of seconds to wait for the job run before timing out.\" , ) _block_type_name = \"Kubernetes Job\" _block_type_slug = \"k8s-job\" _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/35vNcprr3MmIlkrKxxCiah/1d720b4b50dfa8876198cf21730cf123/Kubernetes_logo_without_workmark.svg.png?h=250\" # noqa: E501 async def trigger ( self ): \"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\" v1_job_model = convert_manifest_to_model ( self . v1_job , \"V1Job\" ) with self . credentials . get_client ( \"batch\" ) as batch_v1_client : await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , body = v1_job_model , namespace = self . namespace , ** self . api_kwargs , ) return KubernetesJobRun ( kubernetes_job = self , v1_job_model = v1_job_model ) @classmethod def from_yaml_file ( cls : Type [ Self ], manifest_path : Union [ Path , str ], ** kwargs ) -> Self : \"\"\"Create a `KubernetesJob` from a YAML file. Args: manifest_path: The YAML file to create the `KubernetesJob` from. Returns: A KubernetesJob object. \"\"\" with open ( manifest_path , \"r\" ) as yaml_stream : yaml_dict = yaml . safe_load ( yaml_stream ) return cls ( v1_job = yaml_dict , ** kwargs ) Functions from_yaml_file classmethod Create a KubernetesJob from a YAML file. Parameters: Name Type Description Default manifest_path Union [ Path , str ] The YAML file to create the KubernetesJob from. required Returns: Type Description Self A KubernetesJob object. Source code in prefect_kubernetes/jobs.py 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 @classmethod def from_yaml_file ( cls : Type [ Self ], manifest_path : Union [ Path , str ], ** kwargs ) -> Self : \"\"\"Create a `KubernetesJob` from a YAML file. Args: manifest_path: The YAML file to create the `KubernetesJob` from. Returns: A KubernetesJob object. \"\"\" with open ( manifest_path , \"r\" ) as yaml_stream : yaml_dict = yaml . safe_load ( yaml_stream ) return cls ( v1_job = yaml_dict , ** kwargs ) trigger async Create a Kubernetes job and return a KubernetesJobRun object. Source code in prefect_kubernetes/jobs.py 489 490 491 492 493 494 495 496 497 498 499 500 501 502 async def trigger ( self ): \"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\" v1_job_model = convert_manifest_to_model ( self . v1_job , \"V1Job\" ) with self . credentials . get_client ( \"batch\" ) as batch_v1_client : await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , body = v1_job_model , namespace = self . namespace , ** self . api_kwargs , ) return KubernetesJobRun ( kubernetes_job = self , v1_job_model = v1_job_model ) KubernetesJobRun Bases: JobRun [ Dict [ str , Any ]] A container representing a run of a Kubernetes job. Source code in prefect_kubernetes/jobs.pyclass KubernetesJobRun ( JobRun [ Dict [ str , Any ]]): \"\"\"A container representing a run of a Kubernetes job.\"\"\" def __init__ ( self , kubernetes_job : \"KubernetesJob\" , v1_job_model : V1Job , ): self . pod_logs = None self . _completed = False self . _kubernetes_job = kubernetes_job self . _v1_job_model = v1_job_model async def _cleanup ( self ): \"\"\"Deletes the Kubernetes job resource.\"\"\" with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client : deleted_v1_job = await run_sync_in_worker_thread ( batch_v1_client . delete_namespaced_job , namespace = self . _kubernetes_job . namespace , name = self . _v1_job_model . metadata . name , ** self . _kubernetes_job . api_kwargs , ) self . logger . info ( f \"Job { self . _v1_job_model . metadata . name } deleted \" f \"with { deleted_v1_job . status !r} .\" ) async def wait_for_completion ( self ): \"\"\"Waits for the job to complete. If the job has `delete_after_completion` set to `True`, the job will be deleted if it is observed by this method to enter a completed state. Raises: RuntimeError: If the Kubernetes job fails. KubernetesJobTimeoutError: If the Kubernetes job times out. ValueError: If `wait_for_completion` is never called. \"\"\" self . pod_logs = {} with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client , self . _kubernetes_job . credentials . get_client ( \"core\" ) as core_v1_client : elapsed_time = 0 while not self . _completed : job_expired = ( elapsed_time > self . _kubernetes_job . timeout_seconds if self . _kubernetes_job . timeout_seconds else False ) if job_expired : raise KubernetesJobTimeoutError ( f \"Job timed out after { elapsed_time } seconds.\" ) latest_v1_job = await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job_status , name = self . _v1_job_model . metadata . name , namespace = self . _kubernetes_job . namespace , ** self . _kubernetes_job . api_kwargs , ) pod_selector = ( \"controller-uid=\" f \" { latest_v1_job . metadata . labels [ 'controller-uid' ] } \" ) v1_pod_list = await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = self . _kubernetes_job . namespace , label_selector = pod_selector , ** self . _kubernetes_job . api_kwargs , ) for pod in v1_pod_list . items : pod_name = pod . metadata . name if ( pod . status . phase == \"Pending\" or pod_name in self . pod_logs . keys () ): continue self . logger . info ( f \"Capturing logs for pod { pod_name !r} .\" ) self . pod_logs [ pod_name ] = await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , namespace = self . _kubernetes_job . namespace , name = pod_name , container = latest_v1_job . spec . template . spec . containers [ 0 ] . name , ** self . _kubernetes_job . api_kwargs , ) if latest_v1_job . status . active : await sleep ( self . _kubernetes_job . interval_seconds ) if self . _kubernetes_job . timeout_seconds : elapsed_time += self . _kubernetes_job . interval_seconds elif latest_v1_job . status . failed : raise RuntimeError ( f \"Job { latest_v1_job . metadata . name !r} failed, check the \" \"Kubernetes pod logs for more information.\" ) elif latest_v1_job . status . succeeded : self . _completed = True self . logger . info ( f \"Job { latest_v1_job . metadata . name !r} has completed.\" ) if self . _kubernetes_job . delete_after_completion : await self . _cleanup () async def fetch_result ( self ) -> Dict [ str , Any ]: \"\"\"Fetch the results of the job. Returns: The logs from each of the pods in the job. Raises: ValueError: If this method is called when the job has a non-terminal state. \"\"\" if not self . _completed : raise ValueError ( \"The Kubernetes Job run is not in a completed state - \" \"be sure to call `wait_for_completion` before attempting \" \"to fetch the result.\" ) return self . pod_logs Functions fetch_result async Fetch the results of the job. Returns: Type Description Dict [ str , Any ] The logs from each of the pods in the job. Raises: Type Description ValueError If this method is called when the job has a non-terminal state. Source code in prefect_kubernetes/jobs.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 async def fetch_result ( self ) -> Dict [ str , Any ]: \"\"\"Fetch the results of the job. Returns: The logs from each of the pods in the job. Raises: ValueError: If this method is called when the job has a non-terminal state. \"\"\" if not self . _completed : raise ValueError ( \"The Kubernetes Job run is not in a completed state - \" \"be sure to call `wait_for_completion` before attempting \" \"to fetch the result.\" ) return self . pod_logs wait_for_completion async Waits for the job to complete. If the job has delete_after_completion set to True , the job will be deleted if it is observed by this method to enter a completed state. Raises: Type Description RuntimeError If the Kubernetes job fails. KubernetesJobTimeoutError If the Kubernetes job times out. ValueError If wait_for_completion is never called. Source code in prefect_kubernetes/jobs.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 async def wait_for_completion ( self ): \"\"\"Waits for the job to complete. If the job has `delete_after_completion` set to `True`, the job will be deleted if it is observed by this method to enter a completed state. Raises: RuntimeError: If the Kubernetes job fails. KubernetesJobTimeoutError: If the Kubernetes job times out. ValueError: If `wait_for_completion` is never called. \"\"\" self . pod_logs = {} with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client , self . _kubernetes_job . credentials . get_client ( \"core\" ) as core_v1_client : elapsed_time = 0 while not self . _completed : job_expired = ( elapsed_time > self . _kubernetes_job . timeout_seconds if self . _kubernetes_job . timeout_seconds else False ) if job_expired : raise KubernetesJobTimeoutError ( f \"Job timed out after { elapsed_time } seconds.\" ) latest_v1_job = await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job_status , name = self . _v1_job_model . metadata . name , namespace = self . _kubernetes_job . namespace , ** self . _kubernetes_job . api_kwargs , ) pod_selector = ( \"controller-uid=\" f \" { latest_v1_job . metadata . labels [ 'controller-uid' ] } \" ) v1_pod_list = await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = self . _kubernetes_job . namespace , label_selector = pod_selector , ** self . _kubernetes_job . api_kwargs , ) for pod in v1_pod_list . items : pod_name = pod . metadata . name if ( pod . status . phase == \"Pending\" or pod_name in self . pod_logs . keys () ): continue self . logger . info ( f \"Capturing logs for pod { pod_name !r} .\" ) self . pod_logs [ pod_name ] = await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , namespace = self . _kubernetes_job . namespace , name = pod_name , container = latest_v1_job . spec . template . spec . containers [ 0 ] . name , ** self . _kubernetes_job . api_kwargs , ) if latest_v1_job . status . active : await sleep ( self . _kubernetes_job . interval_seconds ) if self . _kubernetes_job . timeout_seconds : elapsed_time += self . _kubernetes_job . interval_seconds elif latest_v1_job . status . failed : raise RuntimeError ( f \"Job { latest_v1_job . metadata . name !r} failed, check the \" \"Kubernetes pod logs for more information.\" ) elif latest_v1_job . status . succeeded : self . _completed = True self . logger . info ( f \"Job { latest_v1_job . metadata . name !r} has completed.\" ) if self . _kubernetes_job . delete_after_completion : await self . _cleanup () Functions create_namespaced_job async Task for creating a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required new_job V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to create this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Job A Kubernetes V1Job object. Example Create a job in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import create_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator (): v1_job_metadata = create_namespaced_job ( new_job = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @task async def create_namespaced_job ( kubernetes_credentials : KubernetesCredentials , new_job : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for creating a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. new_job: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to create this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Job` object. Example: Create a job in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import create_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator(): v1_job_metadata = create_namespaced_job( new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}), kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , namespace = namespace , body = new_job , ** kube_kwargs , ) delete_namespaced_job async Task for deleting a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Status A Kubernetes V1Status object. Example Delete \"my-job\" in the default namespace: from kubernetes.client.models import V1DeleteOptions from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import delete_namespaced_job @flow def kubernetes_orchestrator (): v1_job_status = delete_namespaced_job ( job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), delete_options = V1DeleteOptions ( propagation_policy = \"Foreground\" ), ) Source code in prefect_kubernetes/jobs.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @task async def delete_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Status : \"\"\"Task for deleting a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Status` object. Example: Delete \"my-job\" in the default namespace: ```python from kubernetes.client.models import V1DeleteOptions from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import delete_namespaced_job @flow def kubernetes_orchestrator(): v1_job_status = delete_namespaced_job( job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), delete_options=V1DeleteOptions(propagation_policy=\"Foreground\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . delete_namespaced_job , name = job_name , body = delete_options , namespace = namespace , ** kube_kwargs , ) list_namespaced_job async Task for listing namespaced Kubernetes jobs. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required namespace Optional [ str ] The Kubernetes namespace to list jobs from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1JobList A Kubernetes V1JobList object. Example List jobs in \"my-namespace\": from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator (): namespaced_job_list = list_namespaced_job ( namespace = \"my-namespace\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @task async def list_namespaced_job ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1JobList : \"\"\"Task for listing namespaced Kubernetes jobs. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. namespace: The Kubernetes namespace to list jobs from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1JobList` object. Example: List jobs in \"my-namespace\": ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator(): namespaced_job_list = list_namespaced_job( namespace=\"my-namespace\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . list_namespaced_job , namespace = namespace , ** kube_kwargs , ) patch_namespaced_job async Task for patching a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to patch. required job_updates V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to patch this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Raises: Type Description ValueError if job_name is None . Returns: Type Description V1Job A Kubernetes V1Job object. Example Patch \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import patch_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator (): v1_job_metadata = patch_namespaced_job ( job_name = \"my-job\" , job_updates = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}}), kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @task async def patch_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , job_updates : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for patching a namespaced Kubernetes job. Args: kubernetes_credentials: KubernetesCredentials block holding authentication needed to generate the required API client. job_name: The name of a job to patch. job_updates: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to patch this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Raises: ValueError: if `job_name` is `None`. Returns: A Kubernetes `V1Job` object. Example: Patch \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import patch_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator(): v1_job_metadata = patch_namespaced_job( job_name=\"my-job\", job_updates=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}}), kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . patch_namespaced_job , name = job_name , namespace = namespace , body = job_updates , ** kube_kwargs , ) read_namespaced_job async Task for reading a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to read. required namespace Optional [ str ] The Kubernetes namespace to read this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Raises: Type Description ValueError if job_name is None . Returns: Type Description V1Job A Kubernetes V1Job object. Example Read \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import read_namespaced_job @flow def kubernetes_orchestrator (): v1_job_metadata = read_namespaced_job ( job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 @task async def read_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for reading a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to read. namespace: The Kubernetes namespace to read this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Raises: ValueError: if `job_name` is `None`. Returns: A Kubernetes `V1Job` object. Example: Read \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import read_namespaced_job @flow def kubernetes_orchestrator(): v1_job_metadata = read_namespaced_job( job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job , name = job_name , namespace = namespace , ** kube_kwargs , ) replace_namespaced_job async Task for replacing a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to replace. required new_job V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to replace this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Job A Kubernetes V1Job object. Example Replace \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import replace_namespaced_job @flow def kubernetes_orchestrator (): v1_job_metadata = replace_namespaced_job ( new_job = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 @task async def replace_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , new_job : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for replacing a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to replace. new_job: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to replace this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Job` object. Example: Replace \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import replace_namespaced_job @flow def kubernetes_orchestrator(): v1_job_metadata = replace_namespaced_job( new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}), job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . replace_namespaced_job , name = job_name , body = new_job , namespace = namespace , ** kube_kwargs , )","title":"Jobs"},{"location":"jobs/#prefect_kubernetes.jobs","text":"Module to define tasks for interacting with Kubernetes jobs.","title":"jobs"},{"location":"jobs/#prefect_kubernetes.jobs-classes","text":"","title":"Classes"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob","text":"Bases: JobBlock A block representing a Kubernetes job configuration. Source code in prefect_kubernetes/jobs.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 class KubernetesJob ( JobBlock ): \"\"\"A block representing a Kubernetes job configuration.\"\"\" v1_job : Dict [ str , Any ] = Field ( default =... , title = \"Job Manifest\" , description = ( \"The Kubernetes job manifest to run. This dictionary can be produced \" \"using `yaml.safe_load`.\" ), ) api_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional API Arguments\" , description = \"Additional arguments to include in Kubernetes API calls.\" , example = { \"pretty\" : \"true\" }, ) credentials : KubernetesCredentials = Field ( default =... , description = \"The credentials to configure a client from.\" ) delete_after_completion : bool = Field ( default = True , description = \"Whether to delete the job after it has completed.\" , ) interval_seconds : int = Field ( default = 5 , description = \"The number of seconds to wait between job status checks.\" , ) namespace : str = Field ( default = \"default\" , description = \"The namespace to create and run the job in.\" , ) timeout_seconds : Optional [ int ] = Field ( default = None , description = \"The number of seconds to wait for the job run before timing out.\" , ) _block_type_name = \"Kubernetes Job\" _block_type_slug = \"k8s-job\" _logo_url = \"https://images.ctfassets.net/zscdif0zqppk/35vNcprr3MmIlkrKxxCiah/1d720b4b50dfa8876198cf21730cf123/Kubernetes_logo_without_workmark.svg.png?h=250\" # noqa: E501 async def trigger ( self ): \"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\" v1_job_model = convert_manifest_to_model ( self . v1_job , \"V1Job\" ) with self . credentials . get_client ( \"batch\" ) as batch_v1_client : await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , body = v1_job_model , namespace = self . namespace , ** self . api_kwargs , ) return KubernetesJobRun ( kubernetes_job = self , v1_job_model = v1_job_model ) @classmethod def from_yaml_file ( cls : Type [ Self ], manifest_path : Union [ Path , str ], ** kwargs ) -> Self : \"\"\"Create a `KubernetesJob` from a YAML file. Args: manifest_path: The YAML file to create the `KubernetesJob` from. Returns: A KubernetesJob object. \"\"\" with open ( manifest_path , \"r\" ) as yaml_stream : yaml_dict = yaml . safe_load ( yaml_stream ) return cls ( v1_job = yaml_dict , ** kwargs )","title":"KubernetesJob"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob-functions","text":"","title":"Functions"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob.from_yaml_file","text":"Create a KubernetesJob from a YAML file. Parameters: Name Type Description Default manifest_path Union [ Path , str ] The YAML file to create the KubernetesJob from. required Returns: Type Description Self A KubernetesJob object. Source code in prefect_kubernetes/jobs.py 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 @classmethod def from_yaml_file ( cls : Type [ Self ], manifest_path : Union [ Path , str ], ** kwargs ) -> Self : \"\"\"Create a `KubernetesJob` from a YAML file. Args: manifest_path: The YAML file to create the `KubernetesJob` from. Returns: A KubernetesJob object. \"\"\" with open ( manifest_path , \"r\" ) as yaml_stream : yaml_dict = yaml . safe_load ( yaml_stream ) return cls ( v1_job = yaml_dict , ** kwargs )","title":"from_yaml_file()"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJob.trigger","text":"Create a Kubernetes job and return a KubernetesJobRun object. Source code in prefect_kubernetes/jobs.py 489 490 491 492 493 494 495 496 497 498 499 500 501 502 async def trigger ( self ): \"\"\"Create a Kubernetes job and return a `KubernetesJobRun` object.\"\"\" v1_job_model = convert_manifest_to_model ( self . v1_job , \"V1Job\" ) with self . credentials . get_client ( \"batch\" ) as batch_v1_client : await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , body = v1_job_model , namespace = self . namespace , ** self . api_kwargs , ) return KubernetesJobRun ( kubernetes_job = self , v1_job_model = v1_job_model )","title":"trigger()"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun","text":"Bases: JobRun [ Dict [ str , Any ]] A container representing a run of a Kubernetes job. Source code in prefect_kubernetes/jobs.pyclass KubernetesJobRun ( JobRun [ Dict [ str , Any ]]): \"\"\"A container representing a run of a Kubernetes job.\"\"\" def __init__ ( self , kubernetes_job : \"KubernetesJob\" , v1_job_model : V1Job , ): self . pod_logs = None self . _completed = False self . _kubernetes_job = kubernetes_job self . _v1_job_model = v1_job_model async def _cleanup ( self ): \"\"\"Deletes the Kubernetes job resource.\"\"\" with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client : deleted_v1_job = await run_sync_in_worker_thread ( batch_v1_client . delete_namespaced_job , namespace = self . _kubernetes_job . namespace , name = self . _v1_job_model . metadata . name , ** self . _kubernetes_job . api_kwargs , ) self . logger . info ( f \"Job { self . _v1_job_model . metadata . name } deleted \" f \"with { deleted_v1_job . status !r} .\" ) async def wait_for_completion ( self ): \"\"\"Waits for the job to complete. If the job has `delete_after_completion` set to `True`, the job will be deleted if it is observed by this method to enter a completed state. Raises: RuntimeError: If the Kubernetes job fails. KubernetesJobTimeoutError: If the Kubernetes job times out. ValueError: If `wait_for_completion` is never called. \"\"\" self . pod_logs = {} with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client , self . _kubernetes_job . credentials . get_client ( \"core\" ) as core_v1_client : elapsed_time = 0 while not self . _completed : job_expired = ( elapsed_time > self . _kubernetes_job . timeout_seconds if self . _kubernetes_job . timeout_seconds else False ) if job_expired : raise KubernetesJobTimeoutError ( f \"Job timed out after { elapsed_time } seconds.\" ) latest_v1_job = await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job_status , name = self . _v1_job_model . metadata . name , namespace = self . _kubernetes_job . namespace , ** self . _kubernetes_job . api_kwargs , ) pod_selector = ( \"controller-uid=\" f \" { latest_v1_job . metadata . labels [ 'controller-uid' ] } \" ) v1_pod_list = await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = self . _kubernetes_job . namespace , label_selector = pod_selector , ** self . _kubernetes_job . api_kwargs , ) for pod in v1_pod_list . items : pod_name = pod . metadata . name if ( pod . status . phase == \"Pending\" or pod_name in self . pod_logs . keys () ): continue self . logger . info ( f \"Capturing logs for pod { pod_name !r} .\" ) self . pod_logs [ pod_name ] = await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , namespace = self . _kubernetes_job . namespace , name = pod_name , container = latest_v1_job . spec . template . spec . containers [ 0 ] . name , ** self . _kubernetes_job . api_kwargs , ) if latest_v1_job . status . active : await sleep ( self . _kubernetes_job . interval_seconds ) if self . _kubernetes_job . timeout_seconds : elapsed_time += self . _kubernetes_job . interval_seconds elif latest_v1_job . status . failed : raise RuntimeError ( f \"Job { latest_v1_job . metadata . name !r} failed, check the \" \"Kubernetes pod logs for more information.\" ) elif latest_v1_job . status . succeeded : self . _completed = True self . logger . info ( f \"Job { latest_v1_job . metadata . name !r} has completed.\" ) if self . _kubernetes_job . delete_after_completion : await self . _cleanup () async def fetch_result ( self ) -> Dict [ str , Any ]: \"\"\"Fetch the results of the job. Returns: The logs from each of the pods in the job. Raises: ValueError: If this method is called when the job has a non-terminal state. \"\"\" if not self . _completed : raise ValueError ( \"The Kubernetes Job run is not in a completed state - \" \"be sure to call `wait_for_completion` before attempting \" \"to fetch the result.\" ) return self . pod_logs","title":"KubernetesJobRun"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun-functions","text":"","title":"Functions"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun.fetch_result","text":"Fetch the results of the job. Returns: Type Description Dict [ str , Any ] The logs from each of the pods in the job. Raises: Type Description ValueError If this method is called when the job has a non-terminal state. Source code in prefect_kubernetes/jobs.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 async def fetch_result ( self ) -> Dict [ str , Any ]: \"\"\"Fetch the results of the job. Returns: The logs from each of the pods in the job. Raises: ValueError: If this method is called when the job has a non-terminal state. \"\"\" if not self . _completed : raise ValueError ( \"The Kubernetes Job run is not in a completed state - \" \"be sure to call `wait_for_completion` before attempting \" \"to fetch the result.\" ) return self . pod_logs","title":"fetch_result()"},{"location":"jobs/#prefect_kubernetes.jobs.KubernetesJobRun.wait_for_completion","text":"Waits for the job to complete. If the job has delete_after_completion set to True , the job will be deleted if it is observed by this method to enter a completed state. Raises: Type Description RuntimeError If the Kubernetes job fails. KubernetesJobTimeoutError If the Kubernetes job times out. ValueError If wait_for_completion is never called. Source code in prefect_kubernetes/jobs.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 async def wait_for_completion ( self ): \"\"\"Waits for the job to complete. If the job has `delete_after_completion` set to `True`, the job will be deleted if it is observed by this method to enter a completed state. Raises: RuntimeError: If the Kubernetes job fails. KubernetesJobTimeoutError: If the Kubernetes job times out. ValueError: If `wait_for_completion` is never called. \"\"\" self . pod_logs = {} with self . _kubernetes_job . credentials . get_client ( \"batch\" ) as batch_v1_client , self . _kubernetes_job . credentials . get_client ( \"core\" ) as core_v1_client : elapsed_time = 0 while not self . _completed : job_expired = ( elapsed_time > self . _kubernetes_job . timeout_seconds if self . _kubernetes_job . timeout_seconds else False ) if job_expired : raise KubernetesJobTimeoutError ( f \"Job timed out after { elapsed_time } seconds.\" ) latest_v1_job = await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job_status , name = self . _v1_job_model . metadata . name , namespace = self . _kubernetes_job . namespace , ** self . _kubernetes_job . api_kwargs , ) pod_selector = ( \"controller-uid=\" f \" { latest_v1_job . metadata . labels [ 'controller-uid' ] } \" ) v1_pod_list = await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = self . _kubernetes_job . namespace , label_selector = pod_selector , ** self . _kubernetes_job . api_kwargs , ) for pod in v1_pod_list . items : pod_name = pod . metadata . name if ( pod . status . phase == \"Pending\" or pod_name in self . pod_logs . keys () ): continue self . logger . info ( f \"Capturing logs for pod { pod_name !r} .\" ) self . pod_logs [ pod_name ] = await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , namespace = self . _kubernetes_job . namespace , name = pod_name , container = latest_v1_job . spec . template . spec . containers [ 0 ] . name , ** self . _kubernetes_job . api_kwargs , ) if latest_v1_job . status . active : await sleep ( self . _kubernetes_job . interval_seconds ) if self . _kubernetes_job . timeout_seconds : elapsed_time += self . _kubernetes_job . interval_seconds elif latest_v1_job . status . failed : raise RuntimeError ( f \"Job { latest_v1_job . metadata . name !r} failed, check the \" \"Kubernetes pod logs for more information.\" ) elif latest_v1_job . status . succeeded : self . _completed = True self . logger . info ( f \"Job { latest_v1_job . metadata . name !r} has completed.\" ) if self . _kubernetes_job . delete_after_completion : await self . _cleanup ()","title":"wait_for_completion()"},{"location":"jobs/#prefect_kubernetes.jobs-functions","text":"","title":"Functions"},{"location":"jobs/#prefect_kubernetes.jobs.create_namespaced_job","text":"Task for creating a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required new_job V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to create this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Job A Kubernetes V1Job object. Example Create a job in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import create_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator (): v1_job_metadata = create_namespaced_job ( new_job = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @task async def create_namespaced_job ( kubernetes_credentials : KubernetesCredentials , new_job : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for creating a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. new_job: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to create this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Job` object. Example: Create a job in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import create_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator(): v1_job_metadata = create_namespaced_job( new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}), kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . create_namespaced_job , namespace = namespace , body = new_job , ** kube_kwargs , )","title":"create_namespaced_job()"},{"location":"jobs/#prefect_kubernetes.jobs.delete_namespaced_job","text":"Task for deleting a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Status A Kubernetes V1Status object. Example Delete \"my-job\" in the default namespace: from kubernetes.client.models import V1DeleteOptions from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import delete_namespaced_job @flow def kubernetes_orchestrator (): v1_job_status = delete_namespaced_job ( job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), delete_options = V1DeleteOptions ( propagation_policy = \"Foreground\" ), ) Source code in prefect_kubernetes/jobs.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @task async def delete_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Status : \"\"\"Task for deleting a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Status` object. Example: Delete \"my-job\" in the default namespace: ```python from kubernetes.client.models import V1DeleteOptions from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import delete_namespaced_job @flow def kubernetes_orchestrator(): v1_job_status = delete_namespaced_job( job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), delete_options=V1DeleteOptions(propagation_policy=\"Foreground\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . delete_namespaced_job , name = job_name , body = delete_options , namespace = namespace , ** kube_kwargs , )","title":"delete_namespaced_job()"},{"location":"jobs/#prefect_kubernetes.jobs.list_namespaced_job","text":"Task for listing namespaced Kubernetes jobs. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required namespace Optional [ str ] The Kubernetes namespace to list jobs from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1JobList A Kubernetes V1JobList object. Example List jobs in \"my-namespace\": from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator (): namespaced_job_list = list_namespaced_job ( namespace = \"my-namespace\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @task async def list_namespaced_job ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1JobList : \"\"\"Task for listing namespaced Kubernetes jobs. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. namespace: The Kubernetes namespace to list jobs from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1JobList` object. Example: List jobs in \"my-namespace\": ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import list_namespaced_job @flow def kubernetes_orchestrator(): namespaced_job_list = list_namespaced_job( namespace=\"my-namespace\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . list_namespaced_job , namespace = namespace , ** kube_kwargs , )","title":"list_namespaced_job()"},{"location":"jobs/#prefect_kubernetes.jobs.patch_namespaced_job","text":"Task for patching a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to patch. required job_updates V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to patch this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Raises: Type Description ValueError if job_name is None . Returns: Type Description V1Job A Kubernetes V1Job object. Example Patch \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import patch_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator (): v1_job_metadata = patch_namespaced_job ( job_name = \"my-job\" , job_updates = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}}), kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @task async def patch_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , job_updates : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for patching a namespaced Kubernetes job. Args: kubernetes_credentials: KubernetesCredentials block holding authentication needed to generate the required API client. job_name: The name of a job to patch. job_updates: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to patch this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Raises: ValueError: if `job_name` is `None`. Returns: A Kubernetes `V1Job` object. Example: Patch \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import patch_namespaced_job from kubernetes.client.models import V1Job @flow def kubernetes_orchestrator(): v1_job_metadata = patch_namespaced_job( job_name=\"my-job\", job_updates=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}}), kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . patch_namespaced_job , name = job_name , namespace = namespace , body = job_updates , ** kube_kwargs , )","title":"patch_namespaced_job()"},{"location":"jobs/#prefect_kubernetes.jobs.read_namespaced_job","text":"Task for reading a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to read. required namespace Optional [ str ] The Kubernetes namespace to read this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Raises: Type Description ValueError if job_name is None . Returns: Type Description V1Job A Kubernetes V1Job object. Example Read \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import read_namespaced_job @flow def kubernetes_orchestrator (): v1_job_metadata = read_namespaced_job ( job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 @task async def read_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for reading a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to read. namespace: The Kubernetes namespace to read this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Raises: ValueError: if `job_name` is `None`. Returns: A Kubernetes `V1Job` object. Example: Read \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import read_namespaced_job @flow def kubernetes_orchestrator(): v1_job_metadata = read_namespaced_job( job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . read_namespaced_job , name = job_name , namespace = namespace , ** kube_kwargs , )","title":"read_namespaced_job()"},{"location":"jobs/#prefect_kubernetes.jobs.replace_namespaced_job","text":"Task for replacing a namespaced Kubernetes job. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block holding authentication needed to generate the required API client. required job_name str The name of a job to replace. required new_job V1Job A Kubernetes V1Job specification. required namespace Optional [ str ] The Kubernetes namespace to replace this job in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API (e.g. {\"pretty\": \"...\", \"dry_run\": \"...\"} ). {} Returns: Type Description V1Job A Kubernetes V1Job object. Example Replace \"my-job\" in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import replace_namespaced_job @flow def kubernetes_orchestrator (): v1_job_metadata = replace_namespaced_job ( new_job = V1Job ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), job_name = \"my-job\" , kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), ) Source code in prefect_kubernetes/jobs.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 @task async def replace_namespaced_job ( kubernetes_credentials : KubernetesCredentials , job_name : str , new_job : V1Job , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Job : \"\"\"Task for replacing a namespaced Kubernetes job. Args: kubernetes_credentials: `KubernetesCredentials` block holding authentication needed to generate the required API client. job_name: The name of a job to replace. new_job: A Kubernetes `V1Job` specification. namespace: The Kubernetes namespace to replace this job in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API (e.g. `{\"pretty\": \"...\", \"dry_run\": \"...\"}`). Returns: A Kubernetes `V1Job` object. Example: Replace \"my-job\" in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.jobs import replace_namespaced_job @flow def kubernetes_orchestrator(): v1_job_metadata = replace_namespaced_job( new_job=V1Job(metadata={\"labels\": {\"foo\": \"bar\"}}), job_name=\"my-job\", kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"batch\" ) as batch_v1_client : return await run_sync_in_worker_thread ( batch_v1_client . replace_namespaced_job , name = job_name , body = new_job , namespace = namespace , ** kube_kwargs , )","title":"replace_namespaced_job()"},{"location":"pods/","text":"prefect_kubernetes.pods Module for interacting with Kubernetes pods from Prefect flows. Classes Functions create_namespaced_pod async Create a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required new_pod V1Pod A Kubernetes V1Pod specification. required namespace Optional [ str ] The Kubernetes namespace to create this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Create a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import create_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = create_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_pod = V1Pod ( metadata = { \"name\" : \"test-pod\" }), ) Source code in prefect_kubernetes/pods.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @task async def create_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , new_pod : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Create a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. new_pod: A Kubernetes `V1Pod` specification. namespace: The Kubernetes namespace to create this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Create a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import create_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = create_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_pod=V1Pod(metadata={\"name\": \"test-pod\"}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_pod , namespace = namespace , body = new_pod , ** kube_kwargs , ) delete_namespaced_pod async Delete a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this pod from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Delete a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import delete_namespaced_pod from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator (): v1_pod_metadata = delete_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , delete_options = V1DeleteOptions ( grace_period_seconds = 0 ), ) Source code in prefect_kubernetes/pods.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @task async def delete_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Delete a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this pod from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Delete a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import delete_namespaced_pod from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator(): v1_pod_metadata = delete_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", delete_options=V1DeleteOptions(grace_period_seconds=0), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_pod , pod_name , body = delete_options , namespace = namespace , ** kube_kwargs , ) list_namespaced_pod async List all pods in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The Kubernetes namespace to list pods from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1PodList A Kubernetes V1PodList object. Example List all pods in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import list_namespaced_pod @flow def kubernetes_orchestrator (): v1_pod_list = list_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ) ) Source code in prefect_kubernetes/pods.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 @task async def list_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1PodList : \"\"\"List all pods in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The Kubernetes namespace to list pods from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1PodList` object. Example: List all pods in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import list_namespaced_pod @flow def kubernetes_orchestrator(): v1_pod_list = list_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\") ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = namespace , ** kube_kwargs ) patch_namespaced_pod async Patch a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to patch. required pod_updates V1Pod A Kubernetes V1Pod object. required namespace Optional [ str ] The Kubernetes namespace to patch this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Patch a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import patch_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = patch_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , pod_updates = V1Pod ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), ) Source code in prefect_kubernetes/pods.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @task async def patch_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , pod_updates : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Patch a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to patch. pod_updates: A Kubernetes `V1Pod` object. namespace: The Kubernetes namespace to patch this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Patch a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import patch_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = patch_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", pod_updates=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_pod , name = pod_name , namespace = namespace , body = pod_updates , ** kube_kwargs , ) read_namespaced_pod async Read information on a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to read. required namespace Optional [ str ] The Kubernetes namespace to read this pod from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Read a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator (): v1_pod_metadata = read_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" ) Source code in prefect_kubernetes/pods.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def read_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Read information on a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to read. namespace: The Kubernetes namespace to read this pod from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Read a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator(): v1_pod_metadata = read_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\" ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod , name = pod_name , namespace = namespace , ** kube_kwargs , ) read_namespaced_pod_log async Read logs from a Kubernetes pod in a given namespace. If print_func is provided, the logs will be streamed using that function. If the pod is no longer running, logs generated up to that point will be returned. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to read logs from. required container str The name of the container to read logs from. required namespace Optional [ str ] The Kubernetes namespace to read this pod from. 'default' print_func Optional [ Callable ] If provided, it will stream the pod logs by calling print_func for every line and returning None . If not provided, the current pod logs will be returned immediately. None **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description Union [ str , None] A string containing the logs from the pod's container. Example Read logs from a pod in the default namespace: from prefect import flow , get_run_logger from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import read_namespaced_pod_logs @flow def kubernetes_orchestrator (): logger = get_run_logger () pod_logs = read_namespaced_pod_logs ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , container = \"test-container\" , print_func = logger . info ) Source code in prefect_kubernetes/pods.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 @task async def read_namespaced_pod_log ( kubernetes_credentials : KubernetesCredentials , pod_name : str , container : str , namespace : Optional [ str ] = \"default\" , print_func : Optional [ Callable ] = None , ** kube_kwargs : Dict [ str , Any ], ) -> Union [ str , None ]: \"\"\"Read logs from a Kubernetes pod in a given namespace. If `print_func` is provided, the logs will be streamed using that function. If the pod is no longer running, logs generated up to that point will be returned. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to read logs from. container: The name of the container to read logs from. namespace: The Kubernetes namespace to read this pod from. print_func: If provided, it will stream the pod logs by calling `print_func` for every line and returning `None`. If not provided, the current pod logs will be returned immediately. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A string containing the logs from the pod's container. Example: Read logs from a pod in the default namespace: ```python from prefect import flow, get_run_logger from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import read_namespaced_pod_logs @flow def kubernetes_orchestrator(): logger = get_run_logger() pod_logs = read_namespaced_pod_logs( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", container=\"test-container\", print_func=logger.info ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : if print_func is not None : # should no longer need to manually refresh on ApiException.status == 410 # as of https://github.com/kubernetes-client/python-base/pull/133 for log_line in Watch () . stream ( core_v1_client . read_namespaced_pod_log , name = pod_name , namespace = namespace , container = container , ): print_func ( log_line ) return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , name = pod_name , namespace = namespace , container = container , ** kube_kwargs , ) replace_namespaced_pod async Replace a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to replace. required new_pod V1Pod A Kubernetes V1Pod object. required namespace Optional [ str ] The Kubernetes namespace to replace this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Replace a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import replace_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = replace_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , new_pod = V1Pod ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}) ) Source code in prefect_kubernetes/pods.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 @task async def replace_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , new_pod : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Replace a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to replace. new_pod: A Kubernetes `V1Pod` object. namespace: The Kubernetes namespace to replace this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Replace a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import replace_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = replace_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", new_pod=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}) ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_pod , body = new_pod , name = pod_name , namespace = namespace , ** kube_kwargs , )","title":"Pods"},{"location":"pods/#prefect_kubernetes.pods","text":"Module for interacting with Kubernetes pods from Prefect flows.","title":"pods"},{"location":"pods/#prefect_kubernetes.pods-classes","text":"","title":"Classes"},{"location":"pods/#prefect_kubernetes.pods-functions","text":"","title":"Functions"},{"location":"pods/#prefect_kubernetes.pods.create_namespaced_pod","text":"Create a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required new_pod V1Pod A Kubernetes V1Pod specification. required namespace Optional [ str ] The Kubernetes namespace to create this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Create a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import create_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = create_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_pod = V1Pod ( metadata = { \"name\" : \"test-pod\" }), ) Source code in prefect_kubernetes/pods.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @task async def create_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , new_pod : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Create a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. new_pod: A Kubernetes `V1Pod` specification. namespace: The Kubernetes namespace to create this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Create a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import create_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = create_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_pod=V1Pod(metadata={\"name\": \"test-pod\"}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_pod , namespace = namespace , body = new_pod , ** kube_kwargs , )","title":"create_namespaced_pod()"},{"location":"pods/#prefect_kubernetes.pods.delete_namespaced_pod","text":"Delete a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to delete. required delete_options Optional [ V1DeleteOptions ] A Kubernetes V1DeleteOptions object. None namespace Optional [ str ] The Kubernetes namespace to delete this pod from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Delete a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import delete_namespaced_pod from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator (): v1_pod_metadata = delete_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , delete_options = V1DeleteOptions ( grace_period_seconds = 0 ), ) Source code in prefect_kubernetes/pods.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @task async def delete_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Delete a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to delete. delete_options: A Kubernetes `V1DeleteOptions` object. namespace: The Kubernetes namespace to delete this pod from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Delete a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import delete_namespaced_pod from kubernetes.client.models import V1DeleteOptions @flow def kubernetes_orchestrator(): v1_pod_metadata = delete_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", delete_options=V1DeleteOptions(grace_period_seconds=0), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_pod , pod_name , body = delete_options , namespace = namespace , ** kube_kwargs , )","title":"delete_namespaced_pod()"},{"location":"pods/#prefect_kubernetes.pods.list_namespaced_pod","text":"List all pods in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The Kubernetes namespace to list pods from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1PodList A Kubernetes V1PodList object. Example List all pods in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import list_namespaced_pod @flow def kubernetes_orchestrator (): v1_pod_list = list_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ) ) Source code in prefect_kubernetes/pods.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 @task async def list_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1PodList : \"\"\"List all pods in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The Kubernetes namespace to list pods from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1PodList` object. Example: List all pods in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import list_namespaced_pod @flow def kubernetes_orchestrator(): v1_pod_list = list_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\") ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_pod , namespace = namespace , ** kube_kwargs )","title":"list_namespaced_pod()"},{"location":"pods/#prefect_kubernetes.pods.patch_namespaced_pod","text":"Patch a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to patch. required pod_updates V1Pod A Kubernetes V1Pod object. required namespace Optional [ str ] The Kubernetes namespace to patch this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Patch a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import patch_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = patch_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , pod_updates = V1Pod ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}), ) Source code in prefect_kubernetes/pods.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @task async def patch_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , pod_updates : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Patch a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to patch. pod_updates: A Kubernetes `V1Pod` object. namespace: The Kubernetes namespace to patch this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Patch a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import patch_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = patch_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", pod_updates=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_pod , name = pod_name , namespace = namespace , body = pod_updates , ** kube_kwargs , )","title":"patch_namespaced_pod()"},{"location":"pods/#prefect_kubernetes.pods.read_namespaced_pod","text":"Read information on a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to read. required namespace Optional [ str ] The Kubernetes namespace to read this pod from. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Read a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator (): v1_pod_metadata = read_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" ) Source code in prefect_kubernetes/pods.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def read_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Read information on a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to read. namespace: The Kubernetes namespace to read this pod from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Read a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials @flow def kubernetes_orchestrator(): v1_pod_metadata = read_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\" ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod , name = pod_name , namespace = namespace , ** kube_kwargs , )","title":"read_namespaced_pod()"},{"location":"pods/#prefect_kubernetes.pods.read_namespaced_pod_log","text":"Read logs from a Kubernetes pod in a given namespace. If print_func is provided, the logs will be streamed using that function. If the pod is no longer running, logs generated up to that point will be returned. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to read logs from. required container str The name of the container to read logs from. required namespace Optional [ str ] The Kubernetes namespace to read this pod from. 'default' print_func Optional [ Callable ] If provided, it will stream the pod logs by calling print_func for every line and returning None . If not provided, the current pod logs will be returned immediately. None **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description Union [ str , None] A string containing the logs from the pod's container. Example Read logs from a pod in the default namespace: from prefect import flow , get_run_logger from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import read_namespaced_pod_logs @flow def kubernetes_orchestrator (): logger = get_run_logger () pod_logs = read_namespaced_pod_logs ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , container = \"test-container\" , print_func = logger . info ) Source code in prefect_kubernetes/pods.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 @task async def read_namespaced_pod_log ( kubernetes_credentials : KubernetesCredentials , pod_name : str , container : str , namespace : Optional [ str ] = \"default\" , print_func : Optional [ Callable ] = None , ** kube_kwargs : Dict [ str , Any ], ) -> Union [ str , None ]: \"\"\"Read logs from a Kubernetes pod in a given namespace. If `print_func` is provided, the logs will be streamed using that function. If the pod is no longer running, logs generated up to that point will be returned. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to read logs from. container: The name of the container to read logs from. namespace: The Kubernetes namespace to read this pod from. print_func: If provided, it will stream the pod logs by calling `print_func` for every line and returning `None`. If not provided, the current pod logs will be returned immediately. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A string containing the logs from the pod's container. Example: Read logs from a pod in the default namespace: ```python from prefect import flow, get_run_logger from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import read_namespaced_pod_logs @flow def kubernetes_orchestrator(): logger = get_run_logger() pod_logs = read_namespaced_pod_logs( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", container=\"test-container\", print_func=logger.info ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : if print_func is not None : # should no longer need to manually refresh on ApiException.status == 410 # as of https://github.com/kubernetes-client/python-base/pull/133 for log_line in Watch () . stream ( core_v1_client . read_namespaced_pod_log , name = pod_name , namespace = namespace , container = container , ): print_func ( log_line ) return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_pod_log , name = pod_name , namespace = namespace , container = container , ** kube_kwargs , )","title":"read_namespaced_pod_log()"},{"location":"pods/#prefect_kubernetes.pods.replace_namespaced_pod","text":"Replace a Kubernetes pod in a given namespace. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required pod_name str The name of the pod to replace. required new_pod V1Pod A Kubernetes V1Pod object. required namespace Optional [ str ] The Kubernetes namespace to replace this pod in. 'default' **kube_kwargs Dict [ str , Any ] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Pod A Kubernetes V1Pod object. Example Replace a pod in the default namespace: from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import replace_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator (): v1_pod_metadata = replace_namespaced_pod ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), pod_name = \"test-pod\" , new_pod = V1Pod ( metadata = { \"labels\" : { \"foo\" : \"bar\" }}) ) Source code in prefect_kubernetes/pods.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 @task async def replace_namespaced_pod ( kubernetes_credentials : KubernetesCredentials , pod_name : str , new_pod : V1Pod , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Dict [ str , Any ], ) -> V1Pod : \"\"\"Replace a Kubernetes pod in a given namespace. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. pod_name: The name of the pod to replace. new_pod: A Kubernetes `V1Pod` object. namespace: The Kubernetes namespace to replace this pod in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A Kubernetes `V1Pod` object. Example: Replace a pod in the default namespace: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.pods import replace_namespaced_pod from kubernetes.client.models import V1Pod @flow def kubernetes_orchestrator(): v1_pod_metadata = replace_namespaced_pod( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), pod_name=\"test-pod\", new_pod=V1Pod(metadata={\"labels\": {\"foo\": \"bar\"}}) ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_pod , body = new_pod , name = pod_name , namespace = namespace , ** kube_kwargs , )","title":"replace_namespaced_pod()"},{"location":"services/","text":"prefect_kubernetes.services Tasks for working with Kubernetes services. Classes Functions create_namespaced_service async Create a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials A KubernetesCredentials block used to generate a CoreV1Api client. required new_service V1Service A V1Service object representing the service to create. required namespace Optional [ str ] The namespace to create the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Additional keyword arguments to pass to the CoreV1Api method call. {} Returns: Type Description V1Service A V1Service representing the created service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import create_namespaced_service from kubernetes.client.models import V1Service @flow def create_service_flow (): v1_service = create_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_service = V1Service ( metadata = { ... }, spec = { ... }), ) Source code in prefect_kubernetes/services.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @task async def create_namespaced_service ( kubernetes_credentials : KubernetesCredentials , new_service : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Create a namespaced Kubernetes service. Args: kubernetes_credentials: A `KubernetesCredentials` block used to generate a `CoreV1Api` client. new_service: A `V1Service` object representing the service to create. namespace: The namespace to create the service in. **kube_kwargs: Additional keyword arguments to pass to the `CoreV1Api` method call. Returns: A `V1Service` representing the created service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import create_namespaced_service from kubernetes.client.models import V1Service @flow def create_service_flow(): v1_service = create_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_service=V1Service(metadata={...}, spec={...}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_service , body = new_service , namespace = namespace , ** kube_kwargs , ) delete_namespaced_service async Delete a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to delete. required delete_options Optional [ V1DeleteOptions ] A V1DeleteOptions object representing the options to delete the service with. None namespace Optional [ str ] The namespace to delete the service from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the deleted service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import delete_namespaced_service @flow def kubernetes_orchestrator (): delete_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 @task async def delete_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Delete a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to delete. delete_options: A `V1DeleteOptions` object representing the options to delete the service with. namespace: The namespace to delete the service from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the deleted service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import delete_namespaced_service @flow def kubernetes_orchestrator(): delete_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_service , name = service_name , namespace = namespace , body = delete_options , ** kube_kwargs , ) list_namespaced_service async List namespaced Kubernetes services. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The namespace to list services from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1ServiceList A V1ServiceList representing the list of services in the given namespace. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import list_namespaced_service @flow def kubernetes_orchestrator (): list_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def list_namespaced_service ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1ServiceList : \"\"\"List namespaced Kubernetes services. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The namespace to list services from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1ServiceList` representing the list of services in the given namespace. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import list_namespaced_service @flow def kubernetes_orchestrator(): list_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_service , namespace = namespace , ** kube_kwargs , ) patch_namespaced_service async Patch a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to patch. required service_updates V1Service A V1Service object representing patches to service_name . required namespace Optional [ str ] The namespace to patch the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the patched service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import patch_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator (): patch_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , new_service = V1Service ( metadata = { ... }, spec = { ... }), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @task async def patch_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , service_updates : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Patch a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to patch. service_updates: A `V1Service` object representing patches to `service_name`. namespace: The namespace to patch the service in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the patched service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import patch_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator(): patch_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", new_service=V1Service(metadata={...}, spec={...}), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_service , name = service_name , body = service_updates , namespace = namespace , ** kube_kwargs , ) read_namespaced_service async Read a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to read. required namespace Optional [ str ] The namespace to read the service from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service object representing the service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import read_namespaced_service @flow def kubernetes_orchestrator (): read_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def read_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Read a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to read. namespace: The namespace to read the service from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` object representing the service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import read_namespaced_service @flow def kubernetes_orchestrator(): read_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_service , name = service_name , namespace = namespace , ** kube_kwargs , ) replace_namespaced_service async Replace a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to replace. required new_service V1Service A V1Service object representing the new service. required namespace Optional [ str ] The namespace to replace the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the new service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import replace_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator (): replace_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , new_service = V1Service ( metadata = { ... }, spec = { ... }), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @task async def replace_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , new_service : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Replace a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to replace. new_service: A `V1Service` object representing the new service. namespace: The namespace to replace the service in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the new service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import replace_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator(): replace_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", new_service=V1Service(metadata={...}, spec={...}), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_service , name = service_name , body = new_service , namespace = namespace , ** kube_kwargs , )","title":"Services"},{"location":"services/#prefect_kubernetes.services","text":"Tasks for working with Kubernetes services.","title":"services"},{"location":"services/#prefect_kubernetes.services-classes","text":"","title":"Classes"},{"location":"services/#prefect_kubernetes.services-functions","text":"","title":"Functions"},{"location":"services/#prefect_kubernetes.services.create_namespaced_service","text":"Create a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials A KubernetesCredentials block used to generate a CoreV1Api client. required new_service V1Service A V1Service object representing the service to create. required namespace Optional [ str ] The namespace to create the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Additional keyword arguments to pass to the CoreV1Api method call. {} Returns: Type Description V1Service A V1Service representing the created service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import create_namespaced_service from kubernetes.client.models import V1Service @flow def create_service_flow (): v1_service = create_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), new_service = V1Service ( metadata = { ... }, spec = { ... }), ) Source code in prefect_kubernetes/services.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @task async def create_namespaced_service ( kubernetes_credentials : KubernetesCredentials , new_service : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Create a namespaced Kubernetes service. Args: kubernetes_credentials: A `KubernetesCredentials` block used to generate a `CoreV1Api` client. new_service: A `V1Service` object representing the service to create. namespace: The namespace to create the service in. **kube_kwargs: Additional keyword arguments to pass to the `CoreV1Api` method call. Returns: A `V1Service` representing the created service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import create_namespaced_service from kubernetes.client.models import V1Service @flow def create_service_flow(): v1_service = create_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), new_service=V1Service(metadata={...}, spec={...}), ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . create_namespaced_service , body = new_service , namespace = namespace , ** kube_kwargs , )","title":"create_namespaced_service()"},{"location":"services/#prefect_kubernetes.services.delete_namespaced_service","text":"Delete a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to delete. required delete_options Optional [ V1DeleteOptions ] A V1DeleteOptions object representing the options to delete the service with. None namespace Optional [ str ] The namespace to delete the service from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the deleted service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import delete_namespaced_service @flow def kubernetes_orchestrator (): delete_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 @task async def delete_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , delete_options : Optional [ V1DeleteOptions ] = None , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Delete a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to delete. delete_options: A `V1DeleteOptions` object representing the options to delete the service with. namespace: The namespace to delete the service from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the deleted service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import delete_namespaced_service @flow def kubernetes_orchestrator(): delete_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . delete_namespaced_service , name = service_name , namespace = namespace , body = delete_options , ** kube_kwargs , )","title":"delete_namespaced_service()"},{"location":"services/#prefect_kubernetes.services.list_namespaced_service","text":"List namespaced Kubernetes services. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required namespace Optional [ str ] The namespace to list services from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1ServiceList A V1ServiceList representing the list of services in the given namespace. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import list_namespaced_service @flow def kubernetes_orchestrator (): list_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def list_namespaced_service ( kubernetes_credentials : KubernetesCredentials , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1ServiceList : \"\"\"List namespaced Kubernetes services. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. namespace: The namespace to list services from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1ServiceList` representing the list of services in the given namespace. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import list_namespaced_service @flow def kubernetes_orchestrator(): list_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . list_namespaced_service , namespace = namespace , ** kube_kwargs , )","title":"list_namespaced_service()"},{"location":"services/#prefect_kubernetes.services.patch_namespaced_service","text":"Patch a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to patch. required service_updates V1Service A V1Service object representing patches to service_name . required namespace Optional [ str ] The namespace to patch the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the patched service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import patch_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator (): patch_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , new_service = V1Service ( metadata = { ... }, spec = { ... }), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 @task async def patch_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , service_updates : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Patch a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to patch. service_updates: A `V1Service` object representing patches to `service_name`. namespace: The namespace to patch the service in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the patched service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import patch_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator(): patch_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", new_service=V1Service(metadata={...}, spec={...}), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . patch_namespaced_service , name = service_name , body = service_updates , namespace = namespace , ** kube_kwargs , )","title":"patch_namespaced_service()"},{"location":"services/#prefect_kubernetes.services.read_namespaced_service","text":"Read a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to read. required namespace Optional [ str ] The namespace to read the service from. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service object representing the service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import read_namespaced_service @flow def kubernetes_orchestrator (): read_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def read_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Read a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to read. namespace: The namespace to read the service from. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` object representing the service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import read_namespaced_service @flow def kubernetes_orchestrator(): read_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . read_namespaced_service , name = service_name , namespace = namespace , ** kube_kwargs , )","title":"read_namespaced_service()"},{"location":"services/#prefect_kubernetes.services.replace_namespaced_service","text":"Replace a namespaced Kubernetes service. Parameters: Name Type Description Default kubernetes_credentials KubernetesCredentials KubernetesCredentials block for creating authenticated Kubernetes API clients. required service_name str The name of the service to replace. required new_service V1Service A V1Service object representing the new service. required namespace Optional [ str ] The namespace to replace the service in. 'default' **kube_kwargs Optional [ Dict [ str , Any ]] Optional extra keyword arguments to pass to the Kubernetes API. {} Returns: Type Description V1Service A V1Service representing the new service. Example from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import replace_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator (): replace_namespaced_service ( kubernetes_credentials = KubernetesCredentials . load ( \"k8s-creds\" ), service_name = \"my-service\" , new_service = V1Service ( metadata = { ... }, spec = { ... }), namespace = \"my-namespace\" , ) Source code in prefect_kubernetes/services.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @task async def replace_namespaced_service ( kubernetes_credentials : KubernetesCredentials , service_name : str , new_service : V1Service , namespace : Optional [ str ] = \"default\" , ** kube_kwargs : Optional [ Dict [ str , Any ]], ) -> V1Service : \"\"\"Replace a namespaced Kubernetes service. Args: kubernetes_credentials: `KubernetesCredentials` block for creating authenticated Kubernetes API clients. service_name: The name of the service to replace. new_service: A `V1Service` object representing the new service. namespace: The namespace to replace the service in. **kube_kwargs: Optional extra keyword arguments to pass to the Kubernetes API. Returns: A `V1Service` representing the new service. Example: ```python from prefect import flow from prefect_kubernetes.credentials import KubernetesCredentials from prefect_kubernetes.services import replace_namespaced_service from kubernetes.client.models import V1Service @flow def kubernetes_orchestrator(): replace_namespaced_service( kubernetes_credentials=KubernetesCredentials.load(\"k8s-creds\"), service_name=\"my-service\", new_service=V1Service(metadata={...}, spec={...}), namespace=\"my-namespace\", ) ``` \"\"\" with kubernetes_credentials . get_client ( \"core\" ) as core_v1_client : return await run_sync_in_worker_thread ( core_v1_client . replace_namespaced_service , name = service_name , body = new_service , namespace = namespace , ** kube_kwargs , )","title":"replace_namespaced_service()"},{"location":"utilities/","text":"prefect_kubernetes.utilities Utilities for working with the Python Kubernetes API. Functions convert_manifest_to_model Recursively converts a dict representation of a Kubernetes resource to the corresponding Python model containing the Python models that compose it, according to the openapi_types on the class retrieved with v1_model_name . If manifest is a path-like object with a .yaml or .yml extension, it will be treated as a path to a Kubernetes resource manifest and loaded into a dict . Parameters: Name Type Description Default manifest Union [ Path , str , KubernetesManifest ] A path to a Kubernetes resource manifest or its dict representation. required v1_model_name str The name of a Kubernetes client model to convert the manifest to. required Returns: Type Description V1KubernetesModel A populated instance of a Kubernetes client model with type v1_model_name . Raises: Type Description ValueError If v1_model_name is not a valid Kubernetes client model name. ValueError If manifest is path-like and is not a valid yaml filename. Source code in prefect_kubernetes/utilities.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def convert_manifest_to_model ( manifest : Union [ Path , str , KubernetesManifest ], v1_model_name : str ) -> V1KubernetesModel : \"\"\"Recursively converts a `dict` representation of a Kubernetes resource to the corresponding Python model containing the Python models that compose it, according to the `openapi_types` on the class retrieved with `v1_model_name`. If `manifest` is a path-like object with a `.yaml` or `.yml` extension, it will be treated as a path to a Kubernetes resource manifest and loaded into a `dict`. Args: manifest: A path to a Kubernetes resource manifest or its `dict` representation. v1_model_name: The name of a Kubernetes client model to convert the manifest to. Returns: A populated instance of a Kubernetes client model with type `v1_model_name`. Raises: ValueError: If `v1_model_name` is not a valid Kubernetes client model name. ValueError: If `manifest` is path-like and is not a valid yaml filename. \"\"\" if not manifest : return None if not ( isinstance ( v1_model_name , str ) and v1_model_name in set ( dir ( k8s_models ))): raise ValueError ( \"`v1_model` must be the name of a valid Kubernetes client model, received \" f \": { v1_model_name !r} \" ) if isinstance ( manifest , ( Path , str )): str_path = str ( manifest ) if not str_path . endswith (( \".yaml\" , \".yml\" )): raise ValueError ( \"Manifest must be a valid dict or path to a .yaml file.\" ) manifest = KubernetesJob . job_from_file ( manifest ) converted_manifest = {} v1_model = getattr ( k8s_models , v1_model_name ) valid_supplied_fields = ( # valid and specified fields for current `v1_model_name` ( k , v ) for k , v in v1_model . openapi_types . items () if v1_model . attribute_map [ k ] in manifest # map goes \ud83d\udc0d -> \ud83d\udc2b, user supplies \ud83d\udc2b ) for field , value_type in valid_supplied_fields : if value_type . startswith ( \"V1\" ): # field value is another model converted_manifest [ field ] = convert_manifest_to_model ( manifest [ v1_model . attribute_map [ field ]], value_type ) elif value_type . startswith ( \"list[V1\" ): # field value is a list of models field_item_type = value_type . replace ( \"list[\" , \"\" ) . replace ( \"]\" , \"\" ) try : converted_manifest [ field ] = [ convert_manifest_to_model ( item , field_item_type ) for item in manifest [ v1_model . attribute_map [ field ]] ] except TypeError : converted_manifest [ field ] = manifest [ v1_model . attribute_map [ field ]] elif value_type in base_types : # field value is a primitive Python type converted_manifest [ field ] = manifest [ v1_model . attribute_map [ field ]] return v1_model ( ** converted_manifest )","title":"Utilities"},{"location":"utilities/#prefect_kubernetes.utilities","text":"Utilities for working with the Python Kubernetes API.","title":"utilities"},{"location":"utilities/#prefect_kubernetes.utilities-functions","text":"","title":"Functions"},{"location":"utilities/#prefect_kubernetes.utilities.convert_manifest_to_model","text":"Recursively converts a dict representation of a Kubernetes resource to the corresponding Python model containing the Python models that compose it, according to the openapi_types on the class retrieved with v1_model_name . If manifest is a path-like object with a .yaml or .yml extension, it will be treated as a path to a Kubernetes resource manifest and loaded into a dict . Parameters: Name Type Description Default manifest Union [ Path , str , KubernetesManifest ] A path to a Kubernetes resource manifest or its dict representation. required v1_model_name str The name of a Kubernetes client model to convert the manifest to. required Returns: Type Description V1KubernetesModel A populated instance of a Kubernetes client model with type v1_model_name . Raises: Type Description ValueError If v1_model_name is not a valid Kubernetes client model name. ValueError If manifest is path-like and is not a valid yaml filename. Source code in prefect_kubernetes/utilities.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def convert_manifest_to_model ( manifest : Union [ Path , str , KubernetesManifest ], v1_model_name : str ) -> V1KubernetesModel : \"\"\"Recursively converts a `dict` representation of a Kubernetes resource to the corresponding Python model containing the Python models that compose it, according to the `openapi_types` on the class retrieved with `v1_model_name`. If `manifest` is a path-like object with a `.yaml` or `.yml` extension, it will be treated as a path to a Kubernetes resource manifest and loaded into a `dict`. Args: manifest: A path to a Kubernetes resource manifest or its `dict` representation. v1_model_name: The name of a Kubernetes client model to convert the manifest to. Returns: A populated instance of a Kubernetes client model with type `v1_model_name`. Raises: ValueError: If `v1_model_name` is not a valid Kubernetes client model name. ValueError: If `manifest` is path-like and is not a valid yaml filename. \"\"\" if not manifest : return None if not ( isinstance ( v1_model_name , str ) and v1_model_name in set ( dir ( k8s_models ))): raise ValueError ( \"`v1_model` must be the name of a valid Kubernetes client model, received \" f \": { v1_model_name !r} \" ) if isinstance ( manifest , ( Path , str )): str_path = str ( manifest ) if not str_path . endswith (( \".yaml\" , \".yml\" )): raise ValueError ( \"Manifest must be a valid dict or path to a .yaml file.\" ) manifest = KubernetesJob . job_from_file ( manifest ) converted_manifest = {} v1_model = getattr ( k8s_models , v1_model_name ) valid_supplied_fields = ( # valid and specified fields for current `v1_model_name` ( k , v ) for k , v in v1_model . openapi_types . items () if v1_model . attribute_map [ k ] in manifest # map goes \ud83d\udc0d -> \ud83d\udc2b, user supplies \ud83d\udc2b ) for field , value_type in valid_supplied_fields : if value_type . startswith ( \"V1\" ): # field value is another model converted_manifest [ field ] = convert_manifest_to_model ( manifest [ v1_model . attribute_map [ field ]], value_type ) elif value_type . startswith ( \"list[V1\" ): # field value is a list of models field_item_type = value_type . replace ( \"list[\" , \"\" ) . replace ( \"]\" , \"\" ) try : converted_manifest [ field ] = [ convert_manifest_to_model ( item , field_item_type ) for item in manifest [ v1_model . attribute_map [ field ]] ] except TypeError : converted_manifest [ field ] = manifest [ v1_model . attribute_map [ field ]] elif value_type in base_types : # field value is a primitive Python type converted_manifest [ field ] = manifest [ v1_model . attribute_map [ field ]] return v1_model ( ** converted_manifest )","title":"convert_manifest_to_model()"}]}